local omgserver = require("omgservers.omgserver")

local GAME_MODE = "test"

local function handle_initialization(self, runtime_qualifier, version_config)
	print(socket.gettime() .. " [GAMESERVER] Server was initialized, qualifier=" .. runtime_qualifier)
	print(socket.gettime() .. " [GAMESERVER] Version config")
	pprint(version_config)

	self.runtime_qualifier = runtime_qualifier
	self.version_config = version_config
end

local function handle_command(self, command_qualifier, command_body)
	if self.runtime_qualifier == omgserver.constants.LOBBY_RUNTIME_QUALIFIER then
		if command_qualifier == omgserver.constants.ADD_CLIENT_SERVICE_COMMAND_QUALIFIER then
			local client_id = command_body.client_id
			-- Request matchmaking
			omgserver.service_commands:request_matchmaking(client_id, GAME_MODE)
		end
		
	elseif self.runtime_qualifier == omgserver.constants.MATCH_RUNTIME_QUALIFIER then
		if command_qualifier == omgserver.constants.ADD_MATCH_CLIENT_SERVICE_COMMAND_QUALIFIER then
			local client_id = command_body.client_id
			
			if self.supervisor_id then
				-- makes other clients to use websockets
				omgserver.service_commands:upgrade_connection(client_id)

				print(socket.gettime() .. " [GAMESERVER] Client upgrade was requested, client_id=" .. client_id)
			else
				-- supervisor always connects first
				self.supervisor_id = client_id

				print(socket.gettime() .. " [GAMESERVER] Supervisor connected, client_id=" .. client_id)
			end
		end
		
	end
end

local function handle_message(self, client_id, message)
	print(socket.gettime() .. " [GAMESERVER] Message was received, client_id=" .. client_id .. ", message=" .. message)

	local decoded_message = json.decode(message)
	
	-- Resend to supervisor by using service commands
	omgserver.service_commands:respond_client(self.supervisor_id, json.encode({
		text = decoded_message.text,
	}))

	if decoded_message.text == "hello_message" then
		omgserver.connections:respond_text_message(client_id, json.encode({
			text = "server_message",
		}))
	end
end

local function handle_server_event(self, event)
	print(socket.gettime() .. " [GAMESERVER] Event was received, event=" .. json.encode(event))
	
	local event_qualifier = event.qualifier
	local event_body = event.body
	if event_qualifier == omgserver.constants.SERVER_INITIALIZED_EVENT_QUALIFIER then
		local runtime_qualifier = event_body.runtime_qualifier
		local version_config = event_body.version_config
		handle_initialization(self, runtime_qualifier, version_config)
	elseif event_qualifier == omgserver.constants.COMMAND_RECEIVED_EVENT_QUALIFIER then
		local command_qualifier = event_body.command_qualifier
		local command_body = event_body.command_body
		handle_command(self, command_qualifier, command_body)
	elseif event_qualifier == omgserver.constants.MESSAGE_RECEIVED_EVENT_QUALIFIER then
		local client_id = event_body.client_id
		local message = event_body.message
		handle_message(self, client_id, message)
	else
		print(socket.gettime() .. " [GAMESERVER] Received unsupported event, qualifier=" .. event_qualifier)
	end
end

function init(self)
	omgserver:init(function(event) handle_server_event(self, event) end, true)
end

function update(self, dt)
	omgserver:update(dt)
end