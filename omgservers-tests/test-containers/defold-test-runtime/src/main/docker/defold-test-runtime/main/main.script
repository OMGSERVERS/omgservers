local omgruntime = require("omgservers.omgruntime.omgruntime")

local GAME_MODE = "test"

local function handle_started(self, runtime_qualifier)
	print(socket.gettime() .. " [GAMESERVER] Server was started, qualifier=" .. runtime_qualifier)
	self.runtime_qualifier = runtime_qualifier
end

local function handle_command(self, command_qualifier, command_body)
	if command_qualifier == omgruntime.constants.INIT_RUNTIME then
		local runtime_config = command_body.runtime_config
		print("Runtime config was received")
		pprint(runtime_config)
	end

	if self.runtime_qualifier == omgruntime.constants.LOBBY then
		if command_qualifier == omgruntime.constants.ADD_CLIENT then
			local client_id = command_body.client_id
			-- Request matchmaking
			omgruntime:request_matchmaking(client_id, GAME_MODE)
		end
		
	elseif self.runtime_qualifier == omgruntime.constants.MATCH then
		if command_qualifier == omgruntime.constants.ADD_MATCH_CLIENT then
			local client_id = command_body.client_id
			
			if self.supervisor_id then
				-- makes other clients to use websockets
				omgruntime:upgrade_connection(client_id)

				print(socket.gettime() .. " [GAMESERVER] Client upgrade was requested, client_id=" .. client_id)
			else
				-- supervisor always connects first
				self.supervisor_id = client_id

				print(socket.gettime() .. " [GAMESERVER] Supervisor connected, client_id=" .. client_id)
			end
		end
	end
end

local function handle_message(self, client_id, message)
	print(socket.gettime() .. " [GAMESERVER] Message was received, client_id=" .. client_id .. ", message=" .. message)

	local decoded_message = json.decode(message)
	
	-- Resend to supervisor by using service commands
	omgruntime:respond_client(self.supervisor_id, json.encode({
		text = decoded_message.text,
	}))

	if decoded_message.text == "hello_message" then
		omgruntime:respond_text_message(client_id, json.encode({
			text = "server_message",
		}))
	end
end

local function handle_server_event(self, event)
	print(socket.gettime() .. " [GAMESERVER] Event was received, event=" .. json.encode(event))
	
	local event_qualifier = event.qualifier
	local event_body = event.body
	if event_qualifier == omgruntime.constants.SERVER_STARTED then
		local runtime_qualifier = event_body.runtime_qualifier
		handle_started(self, runtime_qualifier)
	elseif event_qualifier == omgruntime.constants.COMMAND_RECEIVED then
		local command_qualifier = event_body.qualifier
		local command_body = event_body.body
		handle_command(self, command_qualifier, command_body)
	elseif event_qualifier == omgruntime.constants.MESSAGE_RECEIVED then
		local client_id = event_body.client_id
		local message = event_body.message
		handle_message(self, client_id, message)
	else
		print(socket.gettime() .. " [GAMESERVER] Received unsupported event, qualifier=" .. event_qualifier)
	end
end

function init(self)
	local options = {
		event_handler = function(event) handle_server_event(self, event) end,
		debug_logging = true,
		trace_logging = true,
	}
	omgruntime:init(options)
	omgruntime:start()
end

function update(self, dt)
	omgruntime:update(dt)
end