#!/bin/bash
set -e

# INTERNAL

internal_help() {
  echo "PROJECT ctl, v1.0.0"
  echo "Usage:"
  if [ -z "$1" -o "$1" = "help" ]; then
    echo " projectctl help"
  fi
  # Build
  if [ -z "$1" -o "$1" = "build" -o "$1" = "build printVersion" ]; then
    echo " projectctl build printVersion"
  fi
  if [ -z "$1" -o "$1" = "build" -o "$1" = "build withTests" ]; then
    echo " projectctl build withTests"
  fi
  if [ -z "$1" -o "$1" = "build" -o "$1" = "build withoutTests" ]; then
    echo " projectctl build withoutTests"
  fi
  if [ -z "$1" -o "$1" = "build" -o "$1" = "build testWithSonar" ]; then
    echo " projectctl build testWithSonar"
  fi
  if [ -z "$1" -o "$1" = "build" -o "$1" = "build beforeCommit" ]; then
    echo " projectctl build beforeCommit"
  fi
  if [ -z "$1" -o "$1" = "build" -o "$1" = "build pushImages" ]; then
    echo " projectctl build pushImages"
  fi
  # Environment
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment printCurrent" ]; then
    echo " projectctl environment printCurrent"
  fi
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment down" ]; then
    echo " projectctl environment down"
  fi
  # Environment localtesting
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment localtesting" -o "$1" = "environment localtesting up" ]; then
    echo " projectctl environment localtesting up"
  fi
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment localtesting" -o "$1" = "environment localtesting ps" ]; then
    echo " projectctl environment localtesting ps"
  fi
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment localtesting" -o "$1" = "environment localtesting test" ]; then
    echo " projectctl environment localtesting test"
  fi
  # Environment development
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment development" -o "$1" = "environment development up" ]; then
    echo " projectctl environment development up"
  fi
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment development" -o "$1" = "environment development ps" ]; then
    echo " projectctl environment development ps"
  fi
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment development" -o "$1" = "environment development reset" ]; then
    echo " projectctl environment development reset"
  fi
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment development" -o "$1" = "environment development logs" ]; then
    echo " projectctl environment development logs"
  fi
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment development" -o "$1" = "environment development ctl" ]; then
    echo " projectctl environment development ctl"
  fi
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment development" -o "$1" = "environment development test" ]; then
    echo " projectctl environment development test"
  fi
  # Environment integration
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment integration" -o "$1" = "environment integration up" ]; then
    echo " projectctl environment integration up"
  fi
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment integration" -o "$1" = "environment integration ps" ]; then
    echo " projectctl environment integration ps"
  fi
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment integration" -o "$1" = "environment integration reset" ]; then
    echo " projectctl environment integration reset"
  fi
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment integration" -o "$1" = "environment integration logs" ]; then
    echo " projectctl environment integration logs"
  fi
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment integration" -o "$1" = "environment integration test" ]; then
    echo " projectctl environment integration test"
  fi
  # Environment standalone
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment standalone" -o "$1" = "environment standalone up" ]; then
    echo " projectctl environment standalone up"
  fi
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment standalone" -o "$1" = "environment standalone ps" ]; then
    echo " projectctl environment standalone ps"
  fi
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment standalone" -o "$1" = "environment standalone reset" ]; then
    echo " projectctl environment standalone reset"
  fi
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment standalone" -o "$1" = "environment standalone logs" ]; then
    echo " projectctl environment standalone logs"
  fi
  if [ -z "$1" -o "$1" = "environment" -o "$1" = "environment standalone" -o "$1" = "environment standalone test" ]; then
    echo " projectctl environment standalone test"
  fi
}

# HANDLERS

build_printVersion() {
  ./mvnw -B help:evaluate -Dexpression=project.version -q -DforceStdout
}

build_withTests() {
  ./mvnw -B install
}

build_withoutTests() {
  ./mvnw -B install -DskipTests
}

build_testWithSonar() {
  ./mvnw -B install org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=OMGSERVERS_omgservers
}

build_beforeCommit() {
#  build_withTests

  environment_localtesting_up
  environment_development_up
  environment_integration_up
  environment_standalone_up

  environment_down
}

build_pushImages() {
  ./mvnw -B install -DskipTests -Dquarkus.container-image.push=true
}

environment_printCurrent() {
  docker compose ls
}

environment_down() {
  docker compose -p localtesting down
  docker compose -p development down
  docker compose -p integration down
  docker compose -p standalone down
}

environment_localtesting_up() {
  docker compose -p development down
  docker compose -p integration down
  docker compose -p standalone down

  OMGSERVERS_VERSION=$(build_printVersion)

  if [ -z "${OMGSERVERS_VERSION}" ]; then
    echo "$(date) ERROR: Current version was not detected, OMGSERVERS_VERSION=${OMGSERVERS_VERSION}"
    exit 1
  fi

  echo "$(date) Using version, OMGSERVERS_VERSION=${OMGSERVERS_VERSION}"

  OMGSERVERS_VERSION=${OMGSERVERS_VERSION} docker compose -p localtesting -f omgservers-environment/omgservers-localtesting/src/compose.yaml up --remove-orphans -d
  docker compose -p localtesting ps
}

environment_localtesting_ps() {
  docker compose -p localtesting ps
}

environment_localtesting_test() {
  OMGSERVERS_TESTER_ENVIRONMENT=LOCALTESTING \
    ./mvnw -B -Dquarkus.test.profile=test -DskipITs=false -f omgservers-tester/pom.xml verify
}

environment_development_up() {
  docker compose -p localtesting down
  docker compose -p integration down
  docker compose -p standalone down

  OMGSERVERS_VERSION=$(build_printVersion)

  if [ -z "${OMGSERVERS_VERSION}" ]; then
    echo "$(date) ERROR: Current version was not detected, OMGSERVERS_VERSION=${OMGSERVERS_VERSION}"
    exit 1
  fi

  echo "$(date) Using version, OMGSERVERS_VERSION=${OMGSERVERS_VERSION}"

  OMGSERVERS_VERSION=${OMGSERVERS_VERSION} docker compose -p development -f omgservers-environment/omgservers-development/src/compose.yaml up --remove-orphans -d
  docker compose -p development ps
}

environment_development_ps() {
  docker compose -p development ps
}

environment_development_reset() {
  docker compose -p development down
  environment_development_up
}

environment_development_logs() {
  docker compose -p development logs $@
}

environment_development_ctl() {
  docker compose -p development exec ctl /bin/bash
}

environment_development_test() {
  environment_development_up

  OMGSERVERS_TESTER_ENVIRONMENT=DEVELOPMENT \
    ./mvnw -B -Dquarkus.test.profile=test -DskipITs=false -f omgservers-tester/pom.xml verify
}

environment_integration_up() {
  docker compose -p localtesting down
  docker compose -p development down
  docker compose -p standalone down

  OMGSERVERS_VERSION=$(build_printVersion)

  if [ -z "${OMGSERVERS_VERSION}" ]; then
    echo "$(date) ERROR: Current version was not detected, OMGSERVERS_VERSION=${OMGSERVERS_VERSION}"
    exit 1
  fi

  echo "$(date) Using version, OMGSERVERS_VERSION=${OMGSERVERS_VERSION}"

  OMGSERVERS_VERSION=${OMGSERVERS_VERSION} docker compose -p integration -f omgservers-environment/omgservers-integration/src/compose.yaml up --remove-orphans -d
  docker compose -p integration ps
}

environment_integration_ps() {
  docker compose -p integration ps
}

environment_integration_reset() {
  docker compose -p integration down
  environment_integration_up
}

environment_integration_logs() {
  docker compose -p integration logs $@
}

environment_integration_test() {
  environment_integration_up

  OMGSERVERS_TESTER_ENVIRONMENT=INTEGRATION \
      ./mvnw -B -Dquarkus.test.profile=test -DskipITs=false -f omgservers-tester/pom.xml verify
}

environment_standalone_up() {
  docker compose -p localtesting down
  docker compose -p development down
  docker compose -p integration down

  OMGSERVERS_VERSION=$(build_printVersion)

  if [ -z "${OMGSERVERS_VERSION}" ]; then
    echo "$(date) ERROR: Current version was not detected, OMGSERVERS_VERSION=${OMGSERVERS_VERSION}"
    exit 1
  fi

  echo "$(date) Using version, OMGSERVERS_VERSION=${OMGSERVERS_VERSION}"

  OMGSERVERS_VERSION=${OMGSERVERS_VERSION} docker compose -p standalone -f omgservers-environment/omgservers-standalone/src/compose.yaml up --remove-orphans -d
  docker compose -p standalone ps
}

environment_standalone_ps() {
  docker compose -p standalone ps
}

environment_standalone_reset() {
  docker compose -p standalone down
  environment_standalone_up
}

environment_standalone_logs() {
  docker compose -p standalone logs $@
}

environment_standalone_test() {
  environment_standalone_up

  OMGSERVERS_TESTER_ENVIRONMENT=STANDALONE \
        ./mvnw -B -Dquarkus.test.profile=test -DskipITs=false -f omgservers-tester/pom.xml verify
}

# Build
if [ "$1" = "build" ]; then
  if [ "$2" = "printVersion" ]; then
    build_printVersion
  elif [ "$2" = "withTests" ]; then
    build_withTests
  elif [ "$2" = "withoutTests" ]; then
    build_withoutTests
  elif [ "$2" = "testWithSonar" ]; then
    build_testWithSonar
  elif [ "$2" = "beforeCommit" ]; then
    build_beforeCommit
  elif [ "$2" = "pushImages" ]; then
    build_pushImages
  else
    internal_help "build"
  fi
# Environment
elif [ "$1" = "environment" ]; then
  if [ "$2" = "printCurrent" ]; then
    environment_printCurrent
  elif [ "$2" = "down" ]; then
    environment_down
  elif [ "$2" = "localtesting" ]; then
    if [ "$3" = "up" ]; then
      environment_localtesting_up
    elif [ "$3" = "ps" ]; then
      environment_localtesting_ps
    elif [ "$3" = "test" ]; then
      environment_localtesting_test
    else
      internal_help "environment localtesting"
    fi
  elif [ "$2" = "development" ]; then
    if [ "$3" = "up" ]; then
      environment_development_up
    elif [ "$3" = "ps" ]; then
      environment_development_ps
    elif [ "$3" = "reset" ]; then
      environment_development_reset
    elif [ "$3" = "logs" ]; then
      environment_development_logs "${@:4}"
    elif [ "$3" = "ctl" ]; then
      environment_development_ctl
    elif [ "$3" = "test" ]; then
      environment_development_test
    else
      internal_help "environment development"
    fi
  elif [ "$2" = "integration" ]; then
    if [ "$3" = "up" ]; then
      environment_integration_up
    elif [ "$3" = "ps" ]; then
      environment_integration_ps
    elif [ "$3" = "reset" ]; then
      environment_integration_reset
    elif [ "$3" = "logs" ]; then
      environment_integration_logs "${@:4}"
    elif [ "$3" = "test" ]; then
      environment_integration_test
    else
      internal_help "environment integration"
    fi
  elif [ "$2" = "standalone" ]; then
    if [ "$3" = "up" ]; then
      environment_standalone_up
    elif [ "$3" = "ps" ]; then
      environment_standalone_ps
    elif [ "$3" = "reset" ]; then
      environment_standalone_reset
    elif [ "$3" = "logs" ]; then
      environment_standalone_logs "${@:4}"
    elif [ "$3" = "test" ]; then
      environment_standalone_test
    else
      internal_help "environment standalone"
    fi
  else
    internal_help "environment"
  fi
else
  internal_help
fi