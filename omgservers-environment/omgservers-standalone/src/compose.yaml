version: "3.8"
services:
  # bootstrap
  jwtkeys:
    image: "omgservers/omgservers-jwtkeys:${OMGSERVERS_VERSION}"
    container_name: "jwtkeys"
    volumes:
      - jwtkeys-data:/jwtkeys
  # frontend
  ingress:
    image: "omgservers/omgservers-ingress:${OMGSERVERS_VERSION}"
    container_name: "ingress"
    restart: unless-stopped
    ports:
      - "${INGRESS_PORT}:10001"
      - "${INGRESS_ADMIN_PORT}:10000"
    networks:
      - frontend
    volumes:
      - ingress-logs:/var/log/envoy
    command: "-c /etc/envoy/standalone.yaml"
  entrypoint1:
    image: "omgservers/omgservers-entrypoint:${OMGSERVERS_VERSION}"
    container_name: "entrypoint1"
    restart: unless-stopped
    depends_on:
      - ingress
    ports:
      - "${ENTRYPOINT1_PORT}:10001"
      - "${ENTRYPOINT1_ADMIN_PORT}:10000"
    networks:
      - frontend
    volumes:
      - entrypoint1-logs:/var/log/envoy
    command: "-c /etc/envoy/standalone1.yaml"
  entrypoint2:
    image: "omgservers/omgservers-entrypoint:${OMGSERVERS_VERSION}"
    container_name: "entrypoint2"
    restart: unless-stopped
    depends_on:
      - ingress
    ports:
      - "${ENTRYPOINT2_PORT}:10001"
      - "${ENTRYPOINT2_ADMIN_PORT}:10000"
    networks:
      - frontend
    volumes:
      - entrypoint2-logs:/var/log/envoy
    command: "-c /etc/envoy/standalone2.yaml"
  entrypoint3:
    image: "omgservers/omgservers-entrypoint:${OMGSERVERS_VERSION}"
    container_name: "entrypoint3"
    restart: unless-stopped
    depends_on:
      - ingress
    ports:
      - "${ENTRYPOINT3_PORT}:10001"
      - "${ENTRYPOINT3_ADMIN_PORT}:10000"
    networks:
      - workers
      - frontend
    volumes:
      - entrypoint3-logs:/var/log/envoy
    command: "-c /etc/envoy/standalone3.yaml"
  # backend
  docker:
    image: "omgservers/omgservers-dockerpoint:${OMGSERVERS_VERSION}"
    container_name: "docker"
    networks:
      - docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  registry:
    image: "omgservers/omgservers-registry:${OMGSERVERS_VERSION}"
    container_name: "registry"
    restart: unless-stopped
    ports:
      - "${REGISTRY_PORT}:5000"
    networks:
      - docker
  builder:
    image: "omgservers/omgservers-builder:${OMGSERVERS_VERSION}"
    container_name: "builder"
    restart: unless-stopped
    ports:
      - "${BUILDER_PORT}:8080"
    networks:
      - backend
      - docker
    environment:
      - JENKINS_URL=http://builder:7070
      - JENKINS_ADMIN_ID=builder
      - JENKINS_ADMIN_PASSWORD=${BUILDER_PASSWORD}
      - JENKINS_ADMIN_TOKEN=${BUILDER_TOKEN}
      - DOCKER_HOST=tcp://docker:2375
      - DOCKER_REGISTRY=${REGISTRY_PORT}
  # service
  gateway:
    image: "omgservers/omgservers-gateway:${OMGSERVERS_VERSION}"
    container_name: "gateway"
    restart: unless-stopped
    depends_on:
      - entrypoint1
      - entrypoint2
      - entrypoint3
    ports:
      - "${GATEWAY_PORT}:10001"
      - "${GATEWAY_ADMIN_PORT}:10000"
    networks:
      - frontend
      - service
    volumes:
      - gateway-logs:/var/log/envoy
    command: "-c /etc/envoy/service12.yaml"
  database:
    image: "omgservers/omgservers-database:${OMGSERVERS_VERSION}"
    container_name: "database"
    restart: unless-stopped
    shm_size: 128m
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=root
    networks:
      - service
    volumes:
      - database-data:/var/lib/postgresql
  queues:
    image: "omgservers/omgservers-queues:${OMGSERVERS_VERSION}"
    container_name: "queues"
    restart: unless-stopped
    environment:
      - ARTEMIS_USER=queues
      - ARTEMIS_PASSWORD=${QUEUES_PASSWORD}
    volumes:
      - queues-data:/var/lib/artemis-instance
    networks:
      - service
  service1:
    image: "omgservers/omgservers-service:${OMGSERVERS_VERSION}"
    container_name: "service1"
    restart: unless-stopped
    networks:
      - backend
      - docker
      - service
    depends_on:
      - jwtkeys
      - database
      - queues
    volumes:
      - jwtkeys-data:/jwtkeys:ro
      - service1-logs:/var/log/omgservers
    environment:
      - OMGSERVERS_LOGGING_APP_LOGS_LEVEL=${OMGSERVERS_LOGGING_LEVEL}
      - OMGSERVERS_DATABASE_URL=postgresql://database:5432/root
      - OMGSERVERS_DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - OMGSERVERS_QUEUES_HOST=queues
      - OMGSERVERS_QUEUES_PASSWORD=${QUEUES_PASSWORD}
      - OMGSERVERS_INDEX_SHARD_COUNT=1
      - OMGSERVERS_INDEX_SERVER_URI=http://gateway:10001
      - OMGSERVERS_BOOTSTRAP_INDEX_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_INDEX_SERVERS=http://gateway:10001
      - OMGSERVERS_BOOTSTRAP_ROOT_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_ADMIN_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - OMGSERVERS_BOOTSTRAP_SUPPORT_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_SUPPORT_PASSWORD=${SUPPORT_PASSWORD}
      - OMGSERVERS_BOOTSTRAP_DEFAULT_POOL_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_DOCKER_HOST_ENABLED=true
      - OMGSERVERS_WORKERS_SERVICE_URI=http://gateway3:10001
      - OMGSERVERS_WORKERS_DOCKER_NETWORK=workers
      - OMGSERVERS_GENERATOR_DATACENTER_ID=0
      - OMGSERVERS_GENERATOR_INSTANCE_ID=0
      - OMGSERVERS_BUILDER_URI=http://builder:8080
      - OMGSERVERS_BUILDER_USER_ID=builder
      - OMGSERVERS_BUILDER_USER_TOKEN=${BUILDER_TOKEN}
      - OMGSERVERS_JWT_PUBLIC_KEY=/jwtkeys/service/public.pem
      - OMGSERVERS_JWT_PRIVATE_KEY=/jwtkeys/service/private.pem
  service2:
    image: "omgservers/omgservers-service:${OMGSERVERS_VERSION}"
    container_name: "service2"
    restart: unless-stopped
    networks:
      - backend
      - docker
      - service
    depends_on:
      - jwtkeys
      - database
      - queues
      - service1
    volumes:
      - jwtkeys-data:/jwtkeys:ro
      - service2-logs:/var/log/omgservers
    environment:
      - OMGSERVERS_LOGGING_APP_LOGS_LEVEL=${OMGSERVERS_LOGGING_LEVEL}
      - OMGSERVERS_DATABASE_URL=postgresql://database:5432/root
      - OMGSERVERS_DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - OMGSERVERS_QUEUES_HOST=queues
      - OMGSERVERS_QUEUES_PASSWORD=${QUEUES_PASSWORD}
      - OMGSERVERS_INDEX_SHARD_COUNT=1
      - OMGSERVERS_INDEX_SERVER_URI=http://gateway:10001
      - OMGSERVERS_WORKERS_SERVICE_URI=http://entrypoint3:10001
      - OMGSERVERS_WORKERS_DOCKER_NETWORK=workers
      - OMGSERVERS_GENERATOR_DATACENTER_ID=0
      - OMGSERVERS_GENERATOR_INSTANCE_ID=0
      - OMGSERVERS_BUILDER_URI=http://builder:8080
      - OMGSERVERS_BUILDER_USER_ID=builder
      - OMGSERVERS_BUILDER_USER_TOKEN=${BUILDER_TOKEN}
      - OMGSERVERS_JWT_PUBLIC_KEY=/jwtkeys/service/public.pem
      - OMGSERVERS_JWT_PRIVATE_KEY=/jwtkeys/service/private.pem
volumes:
  jwtkeys-data:
    name: jwtkeys-data
    driver: local
  ingress-logs:
    name: ingress-logs
    driver: local
  entrypoint1-logs:
    name: entrypoint1-logs
    driver: local
  entrypoint2-logs:
    name: entrypoint2-logs
    driver: local
  entrypoint3-logs:
    name: entrypoint3-logs
    driver: local
  gateway-logs:
    name: gateway-logs
    driver: local
  database-data:
    name: database-data
    driver: local
  queues-data:
    name: queues-data
    driver: local
  service1-logs:
    name: service1-logs
    driver: local
  service2-logs:
    name: service2-logs
    driver: local
networks:
  frontend:
    name: frontend
  backend:
    name: backend
  docker:
    name: docker
  workers:
    name: workers
  service:
    name: service