version: "3.8"
services:
  # frontend
  ingress:
    image: "omgservers/omgservers-ingress:${OMGSERVERS_VERSION}"
    container_name: "ingress"
    restart: unless-stopped
    volumes:
      - ./ingress/server.pem:/certificate/server.pem:ro
      - ./ingress/privateKey.pem:/certificate/privateKey.pem:ro
    ports:
      - "${INGRESS_PORT}:10001"
      - "127.0.0.1:20000:10000"
    networks:
      - frontend
    command: "-c /etc/envoy/entrypoint1.yaml"
  entrypoint1:
    image: "omgservers/omgservers-entrypoint:${OMGSERVERS_VERSION}"
    container_name: "entrypoint1"
    restart: unless-stopped
    depends_on:
      - ingress
    ports:
      - "127.0.0.1:10001:10001"
      - "127.0.0.1:20001:10000"
    networks:
      - frontend
      - service
    command: "-c /etc/envoy/standalone1.yaml"
  entrypoint2:
    image: "omgservers/omgservers-entrypoint:${OMGSERVERS_VERSION}"
    container_name: "entrypoint2"
    restart: unless-stopped
    depends_on:
      - ingress
    ports:
      - "127.0.0.1:10002:10001"
      - "127.0.0.1:20002:10000"
    networks:
      - frontend
      - service
    command: "-c /etc/envoy/standalone2.yaml"
  entrypoint3:
    image: "omgservers/omgservers-entrypoint:${OMGSERVERS_VERSION}"
    container_name: "entrypoint3"
    restart: unless-stopped
    depends_on:
      - ingress
    ports:
      - "127.0.0.1:10003:10001"
      - "127.0.0.1:20003:10000"
    networks:
      - workers
      - frontend
      - service
    command: "-c /etc/envoy/standalone3.yaml"
  ctl:
    image: "omgservers/omgservers-ctl:${OMGSERVERS_VERSION}"
    container_name: "ctl"
    restart: unless-stopped
    depends_on:
      - entrypoint1
      - entrypoint2
    environment:
      - DELAY=16
      - EXTERNAL_URL=http://entrypoint1:10001
      - INTERNAL_URL=http://entrypoint2:10001
      - ADMIN_USER_ID=223221505901723648
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - SUPPORT_USER_ID=231928170708729857
      - SUPPORT_PASSWORD=${SUPPORT_PASSWORD}
      - BACKGROUND=true
    networks:
      - frontend
  # backend
  docker:
    image: "omgservers/omgservers-docker:${OMGSERVERS_VERSION}"
    container_name: "docker"
    restart: unless-stopped
    networks:
      - docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  registry:
    image: "omgservers/omgservers-registry:${OMGSERVERS_VERSION}"
    container_name: "registry"
    restart: unless-stopped
    ports:
      - "127.0.0.1:5000:5000"
    networks:
      - docker
  builder:
    image: "omgservers/omgservers-builder:${OMGSERVERS_VERSION}"
    container_name: "builder"
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:8080"
    networks:
      - backend
      - docker
    environment:
      - JENKINS_URL=http://builder:7070
      - JENKINS_ADMIN_ID=builder
      - JENKINS_ADMIN_PASSWORD=${BUILDER_PASSWORD}
      - JENKINS_ADMIN_TOKEN=${BUILDER_TOKEN}
      - DOCKER_HOST=tcp://docker:2375
      - DOCKER_REGISTRY=127.0.0.1:5000
  # service
  database:
    image: "omgservers/omgservers-database:${OMGSERVERS_VERSION}"
    container_name: "database"
    restart: unless-stopped
    shm_size: 128m
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=root
    networks:
      - service
    volumes:
      - database-data:/var/lib/postgresql
  queues:
    image: "omgservers/omgservers-queues:${OMGSERVERS_VERSION}"
    container_name: "queues"
    restart: unless-stopped
    environment:
      - ARTEMIS_USER=queues
      - ARTEMIS_PASSWORD=${QUEUES_PASSWORD}
    volumes:
      - queues-data:/var/lib/artemis-instance
    networks:
      - service
  service:
    image: "omgservers/omgservers-service:${OMGSERVERS_VERSION}"
    container_name: "service"
    restart: unless-stopped
    networks:
      - backend
      - docker
      - service
    depends_on:
      - database
      - queues
    volumes:
      - ./jwtkeys/privateKey.pem:/jwtkeys/privateKey.pem:ro
      - ./jwtkeys/publicKey.pem:/jwtkeys/publicKey.pem:ro
    environment:
      - OMGSERVERS_LOGGING_APP_LOGS_LEVEL=${OMGSERVERS_LOGGING_LEVEL}
      - OMGSERVERS_DATABASE_URL=postgresql://database:5432/root
      - OMGSERVERS_DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - OMGSERVERS_QUEUES_HOST=queues
      - OMGSERVERS_QUEUES_PASSWORD=${QUEUES_PASSWORD}
      - OMGSERVERS_INDEX_SHARD_COUNT=${OMGSERVERS_SHARDS}
      - OMGSERVERS_INDEX_SERVER_URI=http://service:8080
      - OMGSERVERS_BOOTSTRAP_INDEX_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_INDEX_SERVERS=http://service:8080
      - OMGSERVERS_BOOTSTRAP_ROOT_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_ADMIN_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - OMGSERVERS_BOOTSTRAP_SUPPORT_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_SUPPORT_PASSWORD=${SUPPORT_PASSWORD}
      - OMGSERVERS_BOOTSTRAP_DEFAULT_POOL_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_DOCKER_HOST_ENABLED=true
      - OMGSERVERS_WORKERS_SERVICE_URI=http://entrypoint3:10001
      - OMGSERVERS_WORKERS_DOCKER_NETWORK=workers
      - OMGSERVERS_GENERATOR_DATACENTER_ID=0
      - OMGSERVERS_GENERATOR_INSTANCE_ID=0
      - OMGSERVERS_BUILDER_URI=http://builder:8080
      - OMGSERVERS_BUILDER_USER_ID=builder
      - OMGSERVERS_BUILDER_USER_TOKEN=${BUILDER_TOKEN}
      - OMGSERVERS_JWT_PUBLIC_KEY=/jwtkeys/publicKey.pem
      - OMGSERVERS_JWT_PRIVATE_KEY=/jwtkeys/privateKey.pem
volumes:
  database-data:
    name: database-data
    driver: local
  queues-data:
    name: queues-data
    driver: local
networks:
  frontend:
    name: frontend
  backend:
    name: backend
  docker:
    name: docker
  workers:
    name: workers
    internal: true
  service:
    name: service
