version: "3.8"
services:
  # frontend
  entrypoint:
    image: "omgservers/omgservers-entrypoint:${OMGSERVERS_VERSION}"
    container_name: "entrypoint"
    ports:
      - "8080:10001"
    networks:
      - omgservers
    command: "-c /etc/envoy/integration.yaml"
  # backend
  docker:
    image: "omgservers/omgservers-docker:${OMGSERVERS_VERSION}"
    container_name: "docker"
    networks:
      - omgservers
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  registry:
    image: "omgservers/omgservers-registry:${OMGSERVERS_VERSION}"
    container_name: "registry"
    ports:
      - "5050:5000"
    networks:
      - omgservers
  builder:
    image: "omgservers/omgservers-builder:${OMGSERVERS_VERSION}"
    container_name: "builder"
    ports:
      - "7070:8080"
    networks:
      - omgservers
    environment:
      - JENKINS_URL=http://builder:8080
      - JENKINS_ADMIN_ID=builder
      - JENKINS_ADMIN_PASSWORD=builder
      - JENKINS_ADMIN_TOKEN=1167db115da39e5c7776c661e463fe7933
      - DOCKER_HOST=tcp://docker:2375
      - DOCKER_REGISTRY=localhost:5050
  # service1
  database1:
    image: "omgservers/omgservers-database:${OMGSERVERS_VERSION}"
    container_name: "database1"
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=root
    networks:
      - omgservers
  queues1:
    image: "omgservers/omgservers-queues:${OMGSERVERS_VERSION}"
    container_name: "queues1"
    environment:
      - ARTEMIS_USER=queues
      - ARTEMIS_PASSWORD=queues
    networks:
      - omgservers
  service1:
    image: "omgservers/omgservers-service:${OMGSERVERS_VERSION}"
    container_name: "service1"
    restart: unless-stopped
    networks:
      - omgservers
    depends_on:
      - database1
      - queues1
    environment:
      - OMGSERVERS_LOGGING_APP_LOGS_LEVEL=${OMGSERVERS_APP_LOGS_LEVEL}
      - OMGSERVERS_LOGGING_ACCESS_LOGS_ENABLED=${OMGSERVERS_ACCESS_LOGS_ENABLED}
      - OMGSERVERS_LOGGING_TRAFFIC_LOGS_LEVEL=${OMGSERVERS_TRAFFIC_LOGS_LEVEL}
      - OMGSERVERS_DATABASE_URL=postgresql://database1:5432/root
      - OMGSERVERS_QUEUES_HOST=queues1
      - OMGSERVERS_INDEX_SHARD_COUNT=3
      - OMGSERVERS_INDEX_SERVER_URI=http://service1:8080
      - OMGSERVERS_BOOTSTRAP_INDEX_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_INDEX_SERVERS=http://service1:8080,http://service2:8080,http://service3:8080
      - OMGSERVERS_BOOTSTRAP_ROOT_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_ADMIN_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_SUPPORT_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_DEFAULT_POOL_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_DOCKER_HOST_ENABLED=true
      - OMGSERVERS_WORKERS_SERVICE_URI=http://service1:8080
      - OMGSERVERS_GENERATOR_DATACENTER_ID=0
      - OMGSERVERS_GENERATOR_INSTANCE_ID=0
      - OMGSERVERS_BUILDER_URI=http://builder:8080
  # service2
  database2:
    image: "omgservers/omgservers-database:${OMGSERVERS_VERSION}"
    container_name: "database2"
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=root
    networks:
      - omgservers
  queues2:
    image: "omgservers/omgservers-queues:${OMGSERVERS_VERSION}"
    container_name: "queues2"
    environment:
      - ARTEMIS_USER=queues
      - ARTEMIS_PASSWORD=queues
    networks:
      - omgservers
  service2:
    image: "omgservers/omgservers-service:${OMGSERVERS_VERSION}"
    container_name: "service2"
    restart: unless-stopped
    networks:
      - omgservers
    depends_on:
      - database2
      - queues2
    environment:
      - OMGSERVERS_LOGGING_APP_LOGS_LEVEL=${OMGSERVERS_APP_LOGS_LEVEL}
      - OMGSERVERS_LOGGING_ACCESS_LOGS_ENABLED=${OMGSERVERS_ACCESS_LOGS_ENABLED}
      - OMGSERVERS_LOGGING_TRAFFIC_LOGS_LEVEL=${OMGSERVERS_TRAFFIC_LOGS_LEVEL}
      - OMGSERVERS_DATABASE_URL=postgresql://database2:5432/root
      - OMGSERVERS_QUEUES_HOST=queues2
      - OMGSERVERS_INDEX_SHARD_COUNT=3
      - OMGSERVERS_INDEX_SERVER_URI=http://service2:8080
      - OMGSERVERS_BOOTSTRAP_INDEX_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_INDEX_SERVERS=http://service1:8080,http://service2:8080,http://service3:8080
      - OMGSERVERS_WORKERS_SERVICE_URI=http://service2:8080
      - OMGSERVERS_GENERATOR_DATACENTER_ID=0
      - OMGSERVERS_GENERATOR_INSTANCE_ID=1
      - OMGSERVERS_BUILDER_URI=http://builder:8080
  # service3
  database3:
    image: "omgservers/omgservers-database:${OMGSERVERS_VERSION}"
    container_name: "database3"
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=root
    networks:
      - omgservers
  queues3:
    image: "omgservers/omgservers-queues:${OMGSERVERS_VERSION}"
    container_name: "queues3"
    environment:
      - ARTEMIS_USER=queues
      - ARTEMIS_PASSWORD=queues
    networks:
      - omgservers
  service3:
    image: "omgservers/omgservers-service:${OMGSERVERS_VERSION}"
    container_name: "service3"
    restart: unless-stopped
    networks:
      - omgservers
    depends_on:
      - database3
      - queues3
    environment:
      - OMGSERVERS_LOGGING_APP_LOGS_LEVEL=${OMGSERVERS_APP_LOGS_LEVEL}
      - OMGSERVERS_LOGGING_ACCESS_LOGS_ENABLED=${OMGSERVERS_ACCESS_LOGS_ENABLED}
      - OMGSERVERS_LOGGING_TRAFFIC_LOGS_LEVEL=${OMGSERVERS_TRAFFIC_LOGS_LEVEL}
      - OMGSERVERS_DATABASE_URL=postgresql://database3:5432/root
      - OMGSERVERS_QUEUES_HOST=queues3
      - OMGSERVERS_INDEX_SHARD_COUNT=3
      - OMGSERVERS_INDEX_SERVER_URI=http://service3:8080
      - OMGSERVERS_BOOTSTRAP_INDEX_ENABLED=true
      - OMGSERVERS_BOOTSTRAP_INDEX_SERVERS=http://service1:8080,http://service2:8080,http://service3:8080
      - OMGSERVERS_WORKERS_SERVICE_URI=http://service3:8080
      - OMGSERVERS_GENERATOR_DATACENTER_ID=0
      - OMGSERVERS_GENERATOR_INSTANCE_ID=2
      - OMGSERVERS_BUILDER_URI=http://builder:8080
networks:
  omgservers:
    name: omgservers
