local runtime_messages = require("server.runtime_utils.runtime_messages")
local omgserver = require("omgservers.omgserver")

local LOBBY_MANAGER = "lobby_manager#lobby_manager"
local MATCH_MANAGER = "match_manager#match_manager"

local function server_initialized(self, runtime_qualifier, version_config)
	print("[SERVER_MANAGER] Server was initialized, qualifier=" .. runtime_qualifier)
	print("[SERVER_MANAGER] Version config")
	pprint(version_config)

	self.runtime_qualifier = runtime_qualifier
	self.version_config = version_config

	local runtime_message = runtime_messages:create_runtime_initialized_message(version_config)

	if runtime_qualifier == omgserver.constants.LOBBY_RUNTIME_QUALIFIER then
		msg.post(LOBBY_MANAGER, runtime_messages.constants.RUNTIME_INITIALIZED, runtime_message)
	elseif runtime_qualifier == omgserver.constants.MATCH_RUNTIME_QUALIFIER then
		msg.post(MATCH_MANAGER, runtime_messages.constants.RUNTIME_INITIALIZED, runtime_message)
	else
		error("[SERVER_MANAGER] Unknown runtime qualifier was received, runtime_qualifier=" .. tostring(runtime_qualifier))
	end
end

local function command_received(self, command_qualifier, command_body)
	local runtime_qualifier = self.runtime_qualifier

	local runtime_message = runtime_messages:create_command_received_message(command_qualifier, command_body)

	if runtime_qualifier == omgserver.constants.LOBBY_RUNTIME_QUALIFIER then
		msg.post(LOBBY_MANAGER, runtime_messages.constants.COMMAND_RECEIVED, runtime_message)
	elseif runtime_qualifier == omgserver.constants.MATCH_RUNTIME_QUALIFIER then
		msg.post(MATCH_MANAGER, runtime_messages.constants.COMMAND_RECEIVED, runtime_message)
	else
		error("[SERVER_MANAGER] Unknown runtime qualifier was received, runtime_qualifier=" .. tostring(runtime_qualifier))
	end
end

local function message_received(self, client_id, decoded_message)
	local runtime_qualifier = self.runtime_qualifier

	print("[SERVER_MANAGER] Message was received, client_id=" .. client_id .. ", message=" .. json.encode(decoded_message))

	local runtime_message = runtime_messages:create_message_received_message(client_id, decoded_message)

	if runtime_qualifier == omgserver.constants.LOBBY_RUNTIME_QUALIFIER then
		msg.post(LOBBY_MANAGER, runtime_messages.constants.MESSAGE_RECEIVED, runtime_message)
	elseif runtime_qualifier == omgserver.constants.MATCH_RUNTIME_QUALIFIER then
		msg.post(MATCH_MANAGER, runtime_messages.constants.MESSAGE_RECEIVED, runtime_message)
	else
		error("[SERVER_MANAGER] Unknown runtime qualifier was received, runtime_qualifier=" .. tostring(runtime_qualifier))
	end
end

local function handle_server_event(self, event)
	print("[SERVER_MANAGER] Event was received, event=" .. json.encode(event))

	local event_qualifier = event.qualifier
	local event_body = event.body

	if event_qualifier == omgserver.constants.SERVER_INITIALIZED_EVENT_QUALIFIER then
		local runtime_qualifier = event_body.runtime_qualifier
		local version_config = event_body.version_config
		server_initialized(self, runtime_qualifier, version_config)
		
	elseif event_qualifier == omgserver.constants.COMMAND_RECEIVED_EVENT_QUALIFIER then
		local command_qualifier = event_body.command_qualifier
		local command_body = event_body.command_body
		command_received(self, command_qualifier, command_body)
		
	elseif event_qualifier == omgserver.constants.MESSAGE_RECEIVED_EVENT_QUALIFIER then
		local client_id = event_body.client_id
		local decoded_message = json.decode(event_body.message)
		message_received(self, client_id, decoded_message)
		
	end
end

function init(self)
	local debug = true
	omgserver:init(function(event) handle_server_event(self, event) end, debug)
end

function update(self, dt)
	omgserver:update(dt)
end