local profiles_container = require("server.runtime_utils.profiles_container")
local players_container = require("server.match_manager.players_container")
local events_container = require("server.match_manager.events_container")
local runtime_messages = require("server.runtime_utils.runtime_messages")
local profile_wrapper = require("server.runtime_utils.profile_wrapper")
local match_settings = require("server.match_manager.match_settings")
local vector_factory = require("server.runtime_utils.vector_factory")
local player_factory = require("server.match_manager.player_factory")
local server_messages = require("common.server_messages")
local game_messages = require("common.game_messages")
local match_events = require("common.match_events")
local omgserver = require("omgservers.omgserver")

local NIL_STATE = "nil"
local WAITING_STATE = "waiting"
local QUEUEING_STATE = "queueing"
local SIMULATION_STATE = "simulation"

local function runtime_initialized(self, version_config)
	self.version_config = version_config
	self.spawn_requests = {}
	self.state = WAITING_STATE
end

local function add_match_client(self, client_id, profile)
	-- Makes client to use websockets
	omgserver.service_commands:upgrade_connection(client_id)

	local wrapped_profile = profile_wrapper:wrap(profile)
	profiles_container:add_profile(client_id, wrapped_profile)
end

local function delete_client(self, client_id)
	if profiles_container:delete_profile(client_id) then
		if players_container:delete_player(client_id) then
			local match_event = match_events:create_player_deleted_event(client_id)
			events_container:add_event(match_event)

			print("[MATCH_MANAGER] Player was deleted, client_id=" .. client_id)
		end
	end
end

local function request_state(self, client_id)
	print("[MATCH_MANAGER] State was requested, client_id=" .. client_id)
	
	local player_instance = players_container:get_player(client_id)
	if not player_instance then
		local wrapped_profile = profiles_container:get_profile(client_id)
		if wrapped_profile then
			local nickname = wrapped_profile.profile.data.nickname
			local new_player = player_factory:create(client_id, nickname)
			if players_container:add_player(client_id, new_player) then
				local match_event = match_events:create_player_created_event(client_id, nickname)
				events_container:add_event(match_event)
				print("[MATCH_MANAGER] Player was created, client_id=" .. client_id)

				-- Send match state for only newly created players
				local state = players_container:get_state()
				local dangling_players = state.dangling_players
				local spawned_players = state.spawned_players
				local server_message = server_messages:create_set_state_message(dangling_players, spawned_players)
				omgserver.connections:respond_text_message(client_id, json.encode(server_message))
			end
		else
			print("[MATCH_MANAGER] Player profile was not found to create a new player, client_id=" .. client_id)
		end
	else
		print("[MATCH_MANAGER] Player was already created to get match state, client_id=" .. client_id)
	end
end

local function request_spawn(self, client_id)
	self.spawn_requests[client_id] = true
	print("[MATCH_MANAGER] Spawn request was set, client_id=" .. client_id)
end

local function move_player(self, client_id, x, y)
	local player_instance = players_container:get_player(client_id)
	if player_instance then
		-- Was spawned and still alive
		if player_instance.position and not player_instance.was_killed then

			local target_position = vector_factory:create(x, y)
			player_instance:set_movement(target_position)

			print("[MATCH_MANAGER] Movement was created, client_id=" .. client_id .. ", x=" .. math.floor(x) .. ", y=" .. math.floor(y) .. ", in_attack=" .. tostring(player_instance.in_attack))
		else
			print("[MATCH_MANAGER] Player was not spawn or was already killed to move, client_id=" .. client_id)
		end
	else
		print("[MATCH_MANAGER] Player was not found to move, client_id=" .. client_id)
	end
end

local function waiting_state(self)
	print("[MATCH_MANAGER] Changed to the WAITING")
	
end

local function queueing_state(self)
	print("[MATCH_MANAGER] Changed to the QUEUEING")
	
end

local function simulation_state(self)
	print("[MATCH_MANAGER] Changed to the SIMULATION")

	-- Handle spawn requests
	local self_spawn_requests = self.spawn_requests
	for client_id, _ in pairs(self_spawn_requests) do
		local player_instance = players_container:get_player(client_id)
		if player_instance then
			local spawn_x = math.random(match_settings.MATCH_BORDER, match_settings.MATCH_WIDTH - match_settings.MATCH_BORDER * 2)
			local spawn_y = math.random(match_settings.MATCH_BORDER, match_settings.MATCH_HEIGHT - match_settings.MATCH_BORDER * 2)
			local spawn_position = vector_factory:create(spawn_x, spawn_y)
			local in_attack = math.random() < 0.5
			player_instance:spawn_player(spawn_position, in_attack)

			local match_event = match_events:create_player_spawned_event(client_id, in_attack, spawn_position.x, spawn_position.y)
			events_container:add_event(match_event)

			print("[MATCH_MANAGER] Player was spawned, client_id=" .. client_id .. ", x=" .. spawn_position.x .. ", y=" .. spawn_position.y .. ", in_attack=" .. tostring(in_attack))
		else
			print("[MATCH_MANAGER] Player was not found to spawn, client_id=" .. client_id)
		end
	end
	self.spawn_requests = {}

-- 	-- Handle newly created players
-- 	local newly_created = players_container:get_newly_created()
-- 	if #newly_created > 0 then
-- 		local state = players_container:get_state()
-- 		local dangling_players = state.dangling_players
-- 		local spawned_players = state.spawned_players
-- 
-- 		local server_message = server_messages:create_set_state_message(dangling_players, spawned_players)
-- 		omgserver.connections:multicast_text_message(newly_created, server_message)
-- 	end
end

function init(self)
	self.state = NIL_STATE
	self.timer = 0
end

function update(self, dt)
	if self.state == NIL_STATE then
		-- Match manger was not initialized
	else
		self.timer = self.timer + dt

		if self.state == WAITING_STATE then
			if self.timer > match_settings.constants.WAITING_DURATION then
				self.state = QUEUEING_STATE
				queueing_state(self)
				
				self.timer = self.timer - match_settings.constants.WAITING_DURATION
			end

		elseif self.state == QUEUEING_STATE then
			if self.timer > match_settings.constants.QUEUEING_DURATION then
				self.state = SIMULATION_STATE
				simulation_state(self)
				self.timer = self.timer - match_settings.constants.QUEUEING_DURATION
			end

		elseif self.state == SIMULATION_STATE then
			self.state = WAITING_STATE
			waiting_state(self)
			self.timer = 0
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash(runtime_messages.constants.RUNTIME_INITIALIZED) then
		local version_config = message.version_config
		runtime_initialized(self, version_config)
		
	elseif message_id == hash(runtime_messages.constants.COMMAND_RECEIVED) then
		local command_qualifier = message.command_qualifier
		local command_body = message.command_body
		if command_qualifier == omgserver.constants.ADD_MATCH_CLIENT_SERVICE_COMMAND_QUALIFIER then
			local client_id = command_body.client_id
			local profile = command_body.profile
			add_match_client(self, client_id, profile)
			
		elseif command_qualifier == omgserver.constants.DELETE_CLIENT_SERVICE_COMMAND_QUALIFIER then
			local client_id = command_body.client_id
			delete_client(self, client_id)
		end
		
	elseif message_id == hash(runtime_messages.constants.MESSAGE_RECEIVED) then
		local client_id = message.client_id
		local game_message = message.message
		local message_qualifier = game_message.qualifier

		if message_qualifier == game_messages.constants.REQUEST_STATE then
			request_state(self, client_id)
			
		elseif message_qualifier == game_messages.constants.REQUEST_SPAWN then
			request_spawn(self, client_id)

		elseif message_qualifier == game_messages.constants.MOVE_PLAYER then
			local x = game_message.x
			local y = game_message.y
			move_player(self, client_id, x, y)
		else
			print("[MATCH_MANAGER] Unknown message qualifier was received, message_qualifier=" .. tostring(message_qualifier))
		end
	end
end