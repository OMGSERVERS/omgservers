local profiles_container = require("server.runtime_utils.profiles_container")
local runtime_messages = require("server.runtime_utils.runtime_messages")
local profile_wrapper = require("server.runtime_utils.profile_wrapper")
local global_counter = require("server.lobby_manager.global_counter")
local server_messages = require("common.server_messages")
local game_messages = require("common.game_messages")
local omgserver = require("omgservers.omgserver")

local DEFAULT_GAME_MODE = "death-match"

local function handle_command_received_message(self, message)
	local command_qualifier = message.command_qualifier
	local command_body = message.command_body

	-- Init runtime
	if command_qualifier == omgserver.constants.INIT_RUNTIME then
		self.version_config = command_body.runtime_config.version_config
		print(socket.gettime() .. " [LOBBY_MANAGER] Runtime was initialized")
		pprint(self.version_config)
		
	-- Add client
	elseif command_qualifier == omgserver.constants.ADD_CLIENT then
		local client_id = command_body.client_id
		local profile = command_body.profile

		if profile.version then
			local wrapped_profile = profile_wrapper:wrap(profile)
			profiles_container:add_profile(client_id, wrapped_profile)
		else
			local new_player_id = global_counter:get_next_id()
			local player_nickname = "Player" .. new_player_id
			local wrapped_profile = profile_wrapper:create(player_nickname)
			profiles_container:add_profile(client_id, wrapped_profile)

			omgserver.service_commands:set_profile(client_id, wrapped_profile.profile)
		end
		

	-- Delete client
	elseif command_qualifier == omgserver.constants.DELETE_CLIENT then
		local client_id = command_body.client_id
		profiles_container:delete_profile(client_id)
		
	-- Handle message
	elseif command_qualifier == omgserver.constants.HANDLE_MESSAGE then
		local client_id = command_body.client_id
		local command_message = json.decode(command_body.message)

		local message_qualifier = command_message.qualifier

		-- Request profile
		if message_qualifier == game_messages.constants.REQUEST_PROFILE then
			local wrapped_profile = profiles_container:get_profile(client_id)
			if wrapped_profile then
				local server_message = server_messages:create_set_profile_message(wrapped_profile.profile)
				omgserver.service_commands:respond_client(client_id, json.encode(server_message))
			else
				print(socket.gettime() .. " [LOBBY_MANAGER] Profile was not found while handling request_profile message, client_id=" .. client_id)
			end

		-- Request matchmaking
		elseif message_qualifier == game_messages.constants.REQUEST_MATCHMAKING then
			local new_nickname = message.nickname

			local wrapped_profile = profiles_container:get_profile(client_id)
			local current_nickname = wrapped_profile.profile.data.nickname

			if new_nickname and current_nickname ~= new_nickname then
				wrapped_profile:change_nickname(new_nickname)

				omgserver.service_commands:set_profile(client_id, wrapped_profile.profile)
				local set_profile_message = server_messages:create_set_profile_message(wrapped_profile.profile)
				omgserver.service_commands:respond_client(client_id, json.encode(set_profile_message))
			end

			omgserver.service_commands:request_matchmaking(client_id, DEFAULT_GAME_MODE)
		else
			print(socket.gettime() .. " [LOBBY_MANAGER] Unknown message qualifier was received, message_qualifier=" .. tostring(message_qualifier))
		end
	end
end

local function handle_message_received_message(self, message)
	local client_id = message.client_id
end

function on_message(self, message_id, message, sender)
	if message_id == hash(runtime_messages.constants.COMMAND_RECEIVED) then
		handle_command_received_message(self, message)
	elseif message_id == hash(runtime_messages.constants.MESSAGE_RECEIVED) then
		handle_message_received_message(self, message)
	end
end