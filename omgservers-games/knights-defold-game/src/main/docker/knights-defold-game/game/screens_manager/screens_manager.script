local screens_messages = require("game.screens_manager.screens_manager")
local match_screen = require("game.match_screen.match_screen")
local lobby_screen = require("game.lobby_screen.lobby_screen")
local ops_screen = require("game.ops_screen.ops_screen")
local core_manager = require("game.core_manager.core_manager")

local AUTH_FACTORY = "#auth_factory"
local LOBBY_FACTORY = "#lobby_factory"
local MATCH_FACTORY = "#match_factory"
local JOINING_FACTORY = "#joining_factory"
local LEAVING_FACTORY = "#leaving_factory"
local OPS_FACTORY = "#ops_factory"

local CORE_MANAGER = "core_manager#core_manager"

local function remove_current_screen(self)
	if self.current_screen_ids then
		for key, go_id in pairs(self.current_screen_ids) do
			go.delete(go_id)
		end

		self.current_screen_ids = nil
	end
end

local function create_game_screen(self, factory_id, collection_id, screen_id)
	print(socket.gettime() .. " [SCREENS_MANAGER] Creating " .. screen_id)

	remove_current_screen(self)

	local collection_ids = collectionfactory.create(factory_id)
	pprint(collection_ids)

	self.current_screen_ids = collection_ids

	local new_instance_id = collection_ids[collection_id]
	core_manager:screen_created(CORE_MANAGER, screen_id, new_instance_id)
	return new_instance_id
end

local function create_auth_screen(self)
	create_game_screen(self, AUTH_FACTORY, "/auth_screen", core_manager.AUTH_SCREEN)
end

local function create_lobby_screen(self, profile)
	local new_instance_id = create_game_screen(self, LOBBY_FACTORY, "/lobby_screen", core_manager.LOBBY_SCREEN)
	lobby_screen:set_profile(new_instance_id, profile)
end

local function create_match_screen(self, settings, dangling_players, spawned_players)
	local new_instance_id = create_game_screen(self, MATCH_FACTORY, "/match_screen", core_manager.MATCH_SCREEN)
	match_screen:set_state(new_instance_id, settings, dangling_players, spawned_players)
end

local function create_joining_screen(self)
	create_game_screen(self, JOINING_FACTORY, "/joining_screen", core_manager.JOINING_SCREEN)
end

local function create_leaving_screen(self)
	create_game_screen(self, LEAVING_FACTORY, "/leaving_screen", core_manager.LEAVING_SCREEN)
end

local function create_ops_screen(self, reason)
	local new_instance_id = create_game_screen(self, OPS_FACTORY, "/ops_screen", core_manager.OPS_SCREEN)
	ops_screen:set_state(new_instance_id, reason)
end

function on_message(self, message_id, message, sender)
	if message_id == hash(screens_messages.CREATE_AUTH_SCREEN) then
		create_auth_screen(self)
		
	elseif message_id == hash(screens_messages.CREATE_LOBBY_SCREEN) then
		local profile = message.profile
		create_lobby_screen(self, profile)
		
	elseif message_id == hash(screens_messages.CREATE_MATCH_SCREEN) then
		local settings = message.settings
		local dangling_players = message.dangling_players
		local spawned_players = message.spawned_players
		create_match_screen(self, settings, dangling_players, spawned_players)

	elseif message_id == hash(screens_messages.CREATE_JOINING_SCREEN) then
		create_joining_screen(self)
		
	elseif message_id == hash(screens_messages.CREATE_LEAVING_SCREEN) then
		create_leaving_screen(self)

	elseif message_id == hash(screens_messages.CREATE_OPS_SCREEN) then
		local reason = message.reason
		create_ops_screen(self, reason)
		
	end
end
