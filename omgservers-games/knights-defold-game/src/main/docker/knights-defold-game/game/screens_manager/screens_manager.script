local screens_messages = require("game.screens_manager.screens_manager")
local match_screen = require("game.match_screen.match_screen")
local core_manager = require("game.core_manager.core_manager")

local AUTH_FACTORY = "#auth_factory"
local LOBBY_FACTORY = "#lobby_factory"
local MATCH_FACTORY = "#match_factory"
local WAIT_FACTORY = "#wait_factory"

local CORE_MANAGER = "core_manager#core_manager"

local function remove_current_screen(self)
	if self.current_screen_ids then
		for key, go_id in pairs(self.current_screen_ids) do
			go.delete(go_id)
		end

		self.current_screen_ids = nil
	end
end

local function create_auth_screen(self, message)
	print(socket.gettime() .. " [SCREENS_MANAGER] Create auth screen")

	remove_current_screen(self)

	local collection_ids = collectionfactory.create(AUTH_FACTORY)
	pprint(collection_ids)

	self.current_screen_ids = collection_ids

	local collection_id = collection_ids["/auth_screen"]
	core_manager:screen_created(CORE_MANAGER, core_manager.AUTH_SCREEN, collection_id)
end

local function create_lobby_screen(self, message)
	print(socket.gettime() .. " [SCREENS_MANAGER] Create lobby screen")

	remove_current_screen(self)

	local collection_ids = collectionfactory.create(LOBBY_FACTORY)
	pprint(collection_ids)

	self.current_screen_ids = collection_ids

	local collection_id = collection_ids["/lobby_screen"]
	core_manager:screen_created(CORE_MANAGER, core_manager.LOBBY_SCREEN, collection_id)
end

local function create_match_screen(self, settings, dangling_players, spawned_players)
	print(socket.gettime() .. " [SCREENS_MANAGER] Create match screen")

	remove_current_screen(self)

	local collection_ids = collectionfactory.create(MATCH_FACTORY)
	pprint(collection_ids)

	self.current_screen_ids = collection_ids
	
	local collection_id = collection_ids["/match_screen"]

	match_screen:set_state(collection_id, settings, dangling_players, spawned_players)
	core_manager:screen_created(CORE_MANAGER, core_manager.MATCH_SCREEN, collection_id)
end

local function create_wait_screen(self)
	print(socket.gettime() .. " [SCREENS_MANAGER] Create wait screen")

	remove_current_screen(self)

	local collection_ids = collectionfactory.create(WAIT_FACTORY)
	pprint(collection_ids)

	self.current_screen_ids = collection_ids

	local collection_id = collection_ids["/wait_screen"]
	core_manager:screen_created(CORE_MANAGER, core_manager.WAIT_SCREEN, collection_id)
end

function on_message(self, message_id, message, sender)
	if message_id == hash(screens_messages.CREATE_AUTH_SCREEN) then
		create_auth_screen(self)
		
	elseif message_id == hash(screens_messages.CREATE_LOBBY_SCREEN) then
		create_lobby_screen(self)
		
	elseif message_id == hash(screens_messages.CREATE_MATCH_SCREEN) then
		local settings = message.settings
		local dangling_players = message.dangling_players
		local spawned_players = message.spawned_players
		create_match_screen(self, settings, dangling_players, spawned_players)

	elseif message_id == hash(screens_messages.CREATE_WAIT_SCREEN) then
		create_wait_screen(self)
		
	end
end
