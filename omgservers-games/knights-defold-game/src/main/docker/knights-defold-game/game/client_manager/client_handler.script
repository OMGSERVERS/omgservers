local client_messages = require("game.client_manager.client_messages")
local core_messages = require("game.core_manager.core_messages")
local omgplayer = require("omgservers.omgplayer")

local CORE_MANAGER = "core_manager#core_handler"

local function handle_client_event_received_message(self, message)
	local event_qualifier = message.event_qualifier
	local event_body = message.event_body

	if event_qualifier == omgplayer.constants.INITIALIZED_EVENT_QUALIFIER then
	elseif event_qualifier == omgplayer.constants.SIGNED_UP_EVENT_QUALIFIER then
		local user_id = event_body.user_id 
		local password = event_body.password
		local core_message = core_messages:create_signed_up_message(user_id, password)
		msg.post(CORE_MANAGER, core_messages.constants.SIGNED_UP, core_message)
		
	elseif event_qualifier == omgplayer.constants.SIGNED_IN_EVENT_QUALIFIER then
		local client_id = event_body.client_id
		local core_message = core_messages:create_signed_in_message(client_id)
		msg.post(CORE_MANAGER, core_messages.constants.SIGNED_IN, core_message)
		
	elseif event_qualifier == omgplayer.constants.GREETED_EVENT_QUALIFIER then
		local version_id = event_body.version_id
		local version_created = event_body.version_created
		local core_message = core_messages:create_user_greeted_message(version_id, version_created)
		msg.post(CORE_MANAGER, core_messages.constants.USER_GREETED, core_message)
		
	elseif event_qualifier == omgplayer.constants.ASSSIGNED_EVENT_QUALIFIER then
		local runtime_qualifier = event_body.runtime_qualifier
		local runtime_id = event_body.runtime_id
		local core_message = core_messages:create_runtime_assigned_message(runtime_qualifier, runtime_id)
		msg.post(CORE_MANAGER, core_messages.constants.RUNTIME_ASSIGNED, core_message)
		
	elseif event_qualifier == omgplayer.constants.MESSAGE_RECEIVED_EVENT_QUALIFIER then
		local received_message = event_body.message
		local core_message = core_messages:create_message_received_message(received_message)
		msg.post(CORE_MANAGER, core_messages.constants.MESSAGE_RECEIVED, core_message)
		
	elseif event_qualifier == omgplayer.constants.CONNECTION_UPGRADED_EVENT_QUALIFIER then
		local core_message = core_messages:create_connection_upgraded_message()
		msg.post(CORE_MANAGER, core_messages.constants.CONNECTION_UPGRADED, core_message)
		
	elseif event_qualifier == omgplayer.constants.FAILED_EVENT_QUALIFIER then
		local reason = event_body.reason
		local core_message = core_messages:create_client_failed_message(reason)
		msg.post(CORE_MANAGER, core_messages.constants.CLIENT_FAILED, core_message)
	end
end

local function handle_signing_up_message(self, message)
	print("[CLIENT_HANDLER] Signing up was requested")
	
	omgplayer:sign_up()
end

local function handle_signing_in_message(self, message)
	print("[CLIENT_HANDLER] Signing in was requested")
	
	local user_id = message.user_id
	local password = message.password
	omgplayer:sign_in(user_id, password)
end

local function handle_sending_message(self, message)
	omgplayer:send_message(message)
end

local function handle_reconnecting_message(self, message)
	print("[CLIENT_HANDLER] Reconnectining was requested")
end

function on_message(self, message_id, message, sender)
	if message_id == hash(client_messages.constants.CLIENT_EVENT_RECEIVED) then
		handle_client_event_received_message(self, message)
	elseif message_id == hash(client_messages.constants.SIGNING_UP_REQUESTED) then
		handle_signing_up_message(self, message)
	elseif message_id == hash(client_messages.constants.SIGNING_IN_REQUESTED) then
		handle_signing_in_message(self, message)
	elseif message_id == hash(client_messages.constants.SENDING_REQUESTED) then
		handle_sending_message(self, message)
	elseif message_id == hash(client_messages.constants.RECONNECTING_REQUESTED) then
		handle_reconnecting_message(self, message)
	end
end