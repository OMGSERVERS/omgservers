local client_messages = require("game.client_manager.client_messages")
local core_messages = require("game.core_manager.core_messages")
local omgplayer = require("omgservers.omgplayer")

local CORE_MANAGER = "core_manager#core_manager"

local function initialized(self)
	print(socket.gettime() .. " [CLIENT_MANAGER] Client was initialized")
end

local function sign_up(self)
	print(socket.gettime() .. " [CLIENT_MANAGER] Signing up was requested")
	omgplayer:sign_up()
end

local function signed_up(self, user_id, password)
	print(socket.gettime() .. " [CLIENT_MANAGER] Signed up, user_id=" .. user_id)
	local core_message = core_messages:create_signed_up_message(user_id, password)
	msg.post(CORE_MANAGER, core_messages.constants.SIGNED_UP, core_message)
end

local function sign_in(self, user_id, password)
	print(socket.gettime() .. " [CLIENT_MANAGER] Signing in was requested, user_id=" .. user_id)
	omgplayer:sign_in(user_id, password)
end

local function signed_in(self, client_id)
	print(socket.gettime() .. " [CLIENT_MANAGER] Signed in, client_id=" .. client_id)
	local core_message = core_messages:create_signed_in_message(client_id)
	msg.post(CORE_MANAGER, core_messages.constants.SIGNED_IN, core_message)
end

local function greeted(self, tenant_version_id, tenant_version_created)
	print(socket.gettime() .. " [CLIENT_MANAGER] Greeted, tenant_version_id=" .. tenant_version_id .. ", tenant_version_created=" .. tenant_version_created)
	local core_message = core_messages:create_user_greeted_message(tenant_version_id, tenant_version_created)
	msg.post(CORE_MANAGER, core_messages.constants.USER_GREETED, core_message)
end

local function assigned(self, runtime_qualifier, runtime_id)
	print(socket.gettime() .. " [CLIENT_MANAGER] Assigned, runtime_qualifier=" .. runtime_qualifier .. ", runtime_id=" .. runtime_id)
	local core_message = core_messages:create_runtime_assigned_message(runtime_qualifier, runtime_id)
	msg.post(CORE_MANAGER, core_messages.constants.RUNTIME_ASSIGNED, core_message)
end

local function message_received(self, decoded_message)
	local core_message = core_messages:create_message_received_message(decoded_message)
	msg.post(CORE_MANAGER, core_messages.constants.MESSAGE_RECEIVED, core_message)
end

local function connection_upgraded(self)
	print(socket.gettime() .. " [CLIENT_MANAGER] Connection was upgraded")
	local core_message = core_messages:create_connection_upgraded_message()
	msg.post(CORE_MANAGER, core_messages.constants.CONNECTION_UPGRADED, core_message)
end

local function failed(self, reason)
	print(socket.gettime() .. " [CLIENT_MANAGER] Client failed, reason=" .. reason)
	local core_message = core_messages:create_client_failed_message(reason)
	msg.post(CORE_MANAGER, core_messages.constants.CLIENT_FAILED, core_message)
end

local function send_command(self, message)
	omgplayer:send_service_message(message)
end

local function send_message(self, message)
	omgplayer:send_text_message(message)
end

local function reconnect(self, message)
	print(socket.gettime() .. " [CLIENT_MANAGER] Reconnectining was requested")
end


local function handle_client_event(self, event)
	print(socket.gettime() .. " [CLIENT_MANAGER] Client event was received, event=" .. json.encode(event))

	local event_qualifier = event.qualifier
	local event_body = event.body

	if event_qualifier == omgplayer.constants.INITIALIZED then
		initialized(self)

	elseif event_qualifier == omgplayer.constants.SIGNED_UP then
		local user_id = event_body.user_id 
		local password = event_body.password
		signed_up(self, user_id, password)

	elseif event_qualifier == omgplayer.constants.SIGNED_IN then
		local client_id = event_body.client_id
		signed_in(self, client_id)

	elseif event_qualifier == omgplayer.constants.GREETED then
		local version_id = event_body.tenant_version_id
		local version_created = event_body.tenant_version_created
		greeted(self, version_id, version_created)

	elseif event_qualifier == omgplayer.constants.ASSIGNED then
		local runtime_qualifier = event_body.runtime_qualifier
		local runtime_id = event_body.runtime_id
		assigned(self, runtime_qualifier, runtime_id)

	elseif event_qualifier == omgplayer.constants.MESSAGE_RECEIVED then
		local decoded_message = json.decode(event_body.message)
		message_received(self, decoded_message)

	elseif event_qualifier == omgplayer.constants.CONNECTION_UPGRADED then
		connection_upgraded(self)

	elseif event_qualifier == omgplayer.constants.PLAYER_FAILED then
		local reason = event_body.reason
		failed(self, reason)

	end
end

function init(self)
	if sys.get_engine_info().is_debug then
		local localtesting = require("game.localtesting")
		print(socket.gettime() .. " [CLIENT_MANAGER] Using localtesting configuration, " .. json.encode(localtesting))

		local options = {
			service_url = "http://localhost:8080",
			tenant_id = localtesting.tenant_id,
			tennat_stage_id = localtesting.tenant_stage_id,
			tennat_stage_secret = localtesting.tenant_stage_secret,
			handler = function(event) handle_client_event(self, event) end,
			debug = false,
		}

		omgplayer:init(options)
	else
		error("[CLIENT_MANAGER] Only localtesting is supported")
	end
end

function update(self, dt)
	omgplayer:update(dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash(client_messages.constants.SIGN_UP) then
		sign_up(self)

	elseif message_id == hash(client_messages.constants.SIGN_IN) then
		local user_id = message.user_id
		local password = message.password
		sign_in(self, user_id, password)

	elseif message_id == hash(client_messages.constants.SEND_COMMAND) then
		send_command(self, message.message)

	elseif message_id == hash(client_messages.constants.SEND_MESSAGE) then
		send_message(self, message.message)

	elseif message_id == hash(client_messages.constants.RECONNECT) then
		reconnect(self)

	end
end