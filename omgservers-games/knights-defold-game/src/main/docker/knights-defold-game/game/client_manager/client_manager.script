local client_manager = require("game.client_manager.client_manager")
local core_manager = require("game.core_manager.core_manager")
local omgplayer = require("omgservers.omgplayer.omgplayer")

local CORE_MANAGER = "core_manager#core_manager"

local function sign_up(self)
	print(socket.gettime() .. " [CLIENT] Signing up")
	omgplayer:sign_up()
end

local function signed_up(self, user_id, password)
	print(socket.gettime() .. " [CLIENT] Signed up, user_id=" .. user_id)
	core_manager:signed_up(CORE_MANAGER, user_id, password)
end

local function sign_in(self, user_id, password)
	print(socket.gettime() .. " [CLIENT] Signing in, user_id=" .. user_id)
	omgplayer:sign_in(user_id, password)
end

local function signed_in(self, client_id)
	print(socket.gettime() .. " [CLIENT] Signed in, client_id=" .. client_id)
	core_manager:signed_in(CORE_MANAGER, client_id)
end

local function greeted(self, version_id, version_created)
	print(socket.gettime() .. " [CLIENT] Greeted, version_id=" .. version_id .. ", version_created=" .. version_created)
	core_manager:user_greeted(CORE_MANAGER, version_id, version_created)
end

local function assigned(self, runtime_qualifier, runtime_id)
	print(socket.gettime() .. " [CLIENT] Assigned, runtime_qualifier=" .. runtime_qualifier .. ", runtime_id=" .. runtime_id)
	core_manager:runtime_assigned(CORE_MANAGER, runtime_qualifier, runtime_id)
end

local function message_received(self, decoded_message)
	core_manager:message_received(CORE_MANAGER, decoded_message)
end

local function connection_upgraded(self)
	print(socket.gettime() .. " [CLIENT] Connection was upgraded")
	core_manager:connection_upgraded(CORE_MANAGER)
end

local function failed(self, reason)
	print(socket.gettime() .. " [CLIENT] Client failed, reason=" .. reason)
	core_manager:client_failed(CORE_MANAGER, reason)
end

local function send_command(self, message)
	omgplayer:send_service_message(message)
end

local function send_message(self, message)
	omgplayer:send_text_message(message)
end

local function reconnect(self, message)
	print(socket.gettime() .. " [CLIENT] Reconnectining")
end


local function handle_client_event(self, event)
	print(socket.gettime() .. " [CLIENT] Client event was received, event=" .. json.encode(event))

	local event_qualifier = event.qualifier
	local event_body = event.body

	if event_qualifier == omgplayer.constants.SIGNED_UP then
		local user_id = event_body.user_id 
		local password = event_body.password
		signed_up(self, user_id, password)

	elseif event_qualifier == omgplayer.constants.SIGNED_IN then
		local client_id = event_body.client_id
		signed_in(self, client_id)

	elseif event_qualifier == omgplayer.constants.GREETED then
		local version_id = event_body.version_id
		local version_created = event_body.version_created
		greeted(self, version_id, version_created)

	elseif event_qualifier == omgplayer.constants.ASSIGNED then
		local runtime_qualifier = event_body.runtime_qualifier
		local runtime_id = event_body.runtime_id
		assigned(self, runtime_qualifier, runtime_id)

	elseif event_qualifier == omgplayer.constants.MESSAGE_RECEIVED then
		local decoded_message = json.decode(event_body.message)
		message_received(self, decoded_message)

	elseif event_qualifier == omgplayer.constants.CONNECTION_UPGRADED then
		connection_upgraded(self)

	elseif event_qualifier == omgplayer.constants.PLAYER_FAILED then
		local reason = event_body.reason
		failed(self, reason)

	end
end

function init(self)
	if sys.get_engine_info().is_debug then
		local localtesting = require("game.localtesting")
		print(socket.gettime() .. " [CLIENT] Using localtesting configuration, " .. json.encode(localtesting))

		local options = {
			tenant_id = localtesting.tenant,
			stage_id = localtesting.stage,
			stage_secret = localtesting.secret,
			event_handler = function(event) handle_client_event(self, event) end,
			service_url = "http://localhost:8080",
			debug_logging = true,
			trace_logging = true,
		}

		omgplayer:init(options)
	else
		error("[CLIENT] Only localtesting is supported")
	end
end

function update(self, dt)
	omgplayer:update(dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash(client_manager.SIGN_UP) then
		sign_up(self)

	elseif message_id == hash(client_manager.SIGN_IN) then
		local user_id = message.user_id
		local password = message.password
		sign_in(self, user_id, password)

	elseif message_id == hash(client_manager.SEND_COMMAND) then
		send_command(self, message.message)

	elseif message_id == hash(client_manager.SEND_MESSAGE) then
		send_message(self, message.message)

	elseif message_id == hash(client_manager.RECONNECT) then
		reconnect(self)

	end
end