local match_top = require("game.match_top.match_top")

local MAX_NODE_INDEX = 5

local function get_top_node(self, index)
	if self.top_nodes[index] then
		return self.top_nodes[index]
	else
		local background_node = gui.get_node("match_top_" .. index)
		local text_node = gui.get_node("match_top_" .. index .. "_text")
		local top_node = {
			background = background_node,
			text = text_node
		}
		self.top_nodes[index] = top_node
		return top_node
	end
end

local function set_top_node(self, index, text)
	local top_node = get_top_node(self, index)
	gui.set_enabled(top_node.background, true)
	gui.set_enabled(top_node.text, true)
	gui.set_text(top_node.text, text)
	print(socket.gettime() .. " [MATCH_TOP] Set top node, index=" .. index .. ", text=" .. text)
end

local function disable_top_node(self, index)
	local top_node = get_top_node(self, index)
	gui.set_enabled(top_node.background, false)
	gui.set_enabled(top_node.text, false)
	print(socket.gettime() .. " [MATCH_TOP] Disable top node, index=" .. index)
end

local function disable_all_top(self)
	for index = 1, MAX_NODE_INDEX do
		disable_top_node(self, index)
	end
end

local function sort_top(self)
	local score = {}
	for client_id, player in pairs(self.players) do
		score[#score + 1] = client_id
	end

	for i = 1, #score - 1 do
		for j = i + 1, #score do
			local c1 = score[i]
			local s1 = self.players[c1].score
			local c2 = score[j]
			local s2 = self.players[c2].score
			if s1 < s2 then
				score[i] = c2
				score[j] = c1
			end
		end
	end

	for index = 1, MAX_NODE_INDEX do
		local client_id = score[index]
		if client_id then
			local player = self.players[client_id]
			local nickname = player.nickname
			local score = player.score
			set_top_node(self, index, nickname .. " : " .. score)
		else
			disable_top_node(self, index)
		end
	end
end

local function delete_player(self, client_id)
	print(socket.gettime() .. " [MATCH_TOP] Delete player, client_id=" .. client_id)
	self.players[client_id] = nil
	sort_top(self)
end

local function add_player(self, client_id, nickname, score)
	print(socket.gettime() .. " [MATCH_TOP] Add player score, nickname=" .. nickname .. ", score=" .. score)
	self.players[client_id] = {
		nickname = nickname,
		score = score,
	}

	sort_top(self)
end

local function increase_score(self, client_id)
	print(socket.gettime() .. " [MATCH_TOP] Increase score, client_id=" .. client_id)
	
	self.players[client_id].score = self.players[client_id].score + 1
	sort_top(self)
end

function init(self)
	self.top_nodes = {}
	self.players = {}
	disable_all_top(self)
	print(socket.gettime() .. " [MATCH_TOP] Initialized")
end

function on_message(self, message_id, message, sender)
	if message_id == hash(match_top.ADD_PLAYER) then
		local client_id = message.client_id
		local nickname = message.nickname
		local score = message.score
		add_player(self, client_id, nickname, score)

	elseif message_id == hash(match_top.DELETE_PLAYER) then
		local client_id = message.client_id
		delete_player(self, client_id)
		
	elseif message_id == hash(match_top.INCREASE_SCORE) then
		local client_id = message.client_id
		increase_score(self, client_id)
	end
end