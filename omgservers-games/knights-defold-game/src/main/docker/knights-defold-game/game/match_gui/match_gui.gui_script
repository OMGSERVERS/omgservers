local match_screen = require("game.match_screen.match_screen")
local core_manager = require("game.core_manager.core_manager")
local match_gui = require("game.match_gui.match_gui")
local druid = require("druid.druid")

local CORE_MANAGER = "/core_manager#core_manager"
local MATCH_SCREEN = "match_screen"

local function leave_button(self)
	core_manager:leaving_requested(CORE_MANAGER)
end

local function update_spawn_countdown(self, time_to_spawn)
	gui.set_text(self.spawn_countdown_node.text, "Spawn in " .. math.floor(time_to_spawn) .. " sec.")
end

local function enable_spawn_countdown(self, time_to_spawn)
	gui.set_enabled(self.spawn_countdown_node.background, true)
	gui.set_enabled(self.spawn_countdown_node.text, true)
	update_spawn_countdown(self, time_to_spawn)
	self.time_to_spawn = time_to_spawn
end

local function disable_spawn_countdown(self)
	gui.set_enabled(self.spawn_countdown_node.background, false)
	gui.set_enabled(self.spawn_countdown_node.text, false)
end

function init(self)
	self.druid = druid.new(self)
	self.button = self.druid:new_button("leave_button", leave_button)

	self.spawn_countdown_node = {
		background = gui.get_node("spawn_countdown"),
		text = gui.get_node("spawn_countdown_text")
	}
	disable_spawn_countdown(self)
	
	print(socket.gettime() .. " [MATCH_GUI] Initialized")
end

function final(self)
	self.druid:final()
end

function update(self, dt)
	self.druid:update(dt)

	if gui.is_enabled(self.spawn_countdown_node.text) then
		self.time_to_spawn = math.max(0, self.time_to_spawn - dt)
		update_spawn_countdown(self, self.time_to_spawn)
	end
end

function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)

	if message_id == hash(match_gui.ENABLE_SPAWN_COUNTDOWN) then
		local time_to_spawn = message.time_to_spawn
		enable_spawn_countdown(self, time_to_spawn)

	elseif message_id == hash(match_gui.DISABLE_SPAWN_COUNTDOWN) then
		disable_spawn_countdown(self)
	end
end

function on_input(self, action_id, action)
	local result = self.druid:on_input(action_id, action)
	if not result then
		if action_id == hash("touch") then
			if action.released then
				match_screen:pointed(MATCH_SCREEN, action.x, action.y)
				return true
			end
		end
	else
		return true
	end
end