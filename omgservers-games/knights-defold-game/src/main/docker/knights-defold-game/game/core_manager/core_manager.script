local screens_manager = require("game.screens_manager.screens_manager")
local client_manager = require("game.client_manager.client_manager")
local leaving_screen = require("game.leaving_screen.leaving_screen")
local joining_screen = require("game.joining_screen.joining_screen")
local match_screen = require("game.match_screen.match_screen")
local core_manager = require("game.core_manager.core_manager")
local auth_screen = require("game.auth_screen.auth_screen")
local omgplayer = require("omgservers.omgplayer.omgplayer")
local core_state = require("game.core_manager.core_state")
local server_messages = require("common.server_messages")
local game_messages = require("common.game_messages")

local SCREENS_MANAGER = "screens_manager#screens_manager"
local CLIENT_MANAGER = "client_manager#client_manager"

local function game_started(self)
	self.started_at = socket.gettime()
	
	print(socket.gettime() .. " [CORE_MANAGER] Game started at " .. os.date())
	core_state:change_game_state(core_state.IN_AUTH)

	-- Show auth screen
	screens_manager:create_auth_screen(SCREENS_MANAGER)
end

local function game_failed(self, reason)
	print(socket.gettime() .. " [CORE_MANAGER] Game failed at " .. os.date() .. ", reason=" ..reason)
	core_state:change_game_state(core_state.GAME_FAILED)

	-- Show ops screen
	screens_manager:create_ops_screen(SCREENS_MANAGER, reason)
end

local function auth_screen_created(self, collection_id)
	print(socket.gettime() .. " [CORE_MANAGER] Auth screen was created at " .. os.date())
	
	self.screen_collection_id = collection_id

	auth_screen:set_state(self.screen_collection_id, "Signing up")

	-- Sign up
	client_manager:sign_up(CLIENT_MANAGER)
end

local function signed_up(self, user_id, password)
	print(socket.gettime() .. " [CORE_MANAGER] User signed up at " .. os.date())

	auth_screen:set_state(self.screen_collection_id, "Signing in")

	-- Sign in
	client_manager:sign_in(CLIENT_MANAGER, user_id, password)
end

local function signed_in(self, client_id)
	print(socket.gettime() .. " [CORE_MANAGER] User signed in at " .. os.date())
	core_state:set_client_id(client_id)
end

local function lobby_assigned(self, runtime_qualifier, runtime_id)
	print(socket.gettime() .. " [CORE_MANAGER] Lobby was assigned at " .. os.date())
	-- Show lobby screen
	screens_manager:create_lobby_screen(SCREENS_MANAGER, core_state.profile)
end

local function greeted(self, version_id, version_created)
	print(socket.gettime() .. " [CORE_MANAGER] User greeted at " .. os.date() .. ", version_id=" .. version_id .. ", version_created=" .. version_created)

	auth_screen:set_state(self.screen_collection_id, "Getting profile")

	-- Request profile
	local game_message = game_messages:request_profile()
	client_manager:send_command(CLIENT_MANAGER, json.encode(game_message))

	core_state:change_game_state(core_state.GETTING_PROFILE)
end

local function set_profile(self, profile)
	print(socket.gettime() .. " [CORE_MANAGER] Profile was received at " .. os.date())
	core_state:set_profile(profile)

	if core_state.game_state == core_state.GETTING_PROFILE then
		-- Show lobby screen
		screens_manager:create_lobby_screen(SCREENS_MANAGER, core_state.profile)
	end
end

local function lobby_screen_created(self, collection_id)
	print(socket.gettime() .. " [CORE_MANAGER] Lobby screen was created at " .. os.date())
	
	self.screen_collection_id = collection_id
	core_state:change_game_state(core_state.IN_LOBBY)
end

local function joining_screen_created(self, collection_id)
	print(socket.gettime() .. " [CORE_MANAGER] Joining screen was created at " .. os.date())

	self.screen_collection_id = collection_id
	core_state:change_game_state(core_state.JOINING)

	joining_screen:set_state(self.screen_collection_id, "Matchmaking")

	-- Request matchmaking
	local nickname = core_state:get_nickname()
	local game_message = game_messages:request_matchmaking(nickname)
	client_manager:send_command(CLIENT_MANAGER, json.encode(game_message))
end

local function joining_requested(self, nickname)
	print(socket.gettime() .. " [CORE_MANAGER] Joining was requested at " .. os.date() .. ", nickname=" .. nickname)

	core_state:change_nickname(nickname)
	
	-- Show joining screen
	screens_manager:create_joining_screen(SCREENS_MANAGER)
end

local function match_assigned(self, runtime_qualifier, runtime_id)
	print(socket.gettime() .. " [CORE_MANAGER] Match was assigned at " .. os.date())
end

local function connection_upgraded(self)
	print(socket.gettime() .. " [CORE_MANAGER] Connection was upgraded at " .. os.date())
	
	core_state:change_game_state(core_state.GETTING_STATE)
	
	-- Request match state
	local game_message = game_messages:request_state()
	client_manager:send_message(CLIENT_MANAGER, json.encode(game_message))
end


local function leaving_requested(self)
	print(socket.gettime() .. " [CORE_MANAGER] Leaving was requested at " .. os.date())
	
	-- Show leaving screen
	screens_manager:create_leaving_screen(SCREENS_MANAGER)
end

local function reset_requested(self)
	print(socket.gettime() .. " [CORE_MANAGER] Reset was requested at " .. os.date())
	omgplayer:reset()
	core_state:reset()
	game_started(self)
end

local function set_state(self, step, settings, dangling_players, spawned_players)
	print(socket.gettime() .. " [CORE_MANAGER] State was received at " .. os.date() .. ", step=" .. step)
	
	if core_state.game_state == core_state.GETTING_STATE then
		-- Show match screen
		screens_manager:create_match_screen(SCREENS_MANAGER, settings, dangling_players, spawned_players)
	end
end

local function match_screen_created(self, collection_id)
	local joining_time = socket.gettime() - self.started_at
	print(socket.gettime() .. " [CORE_MANAGER] It takes " .. joining_time .. " seconds to join")
	
	print(socket.gettime() .. " [CORE_MANAGER] Match screen was created at " .. os.date())
	
	self.screen_collection_id = collection_id
	core_state:change_game_state(core_state.IN_MATCH)
end

local function leaving_screen_created(self, collection_id)
	print(socket.gettime() .. " [CORE_MANAGER] Leaving screen was created at " .. os.date())

	-- Leave request
	local game_message = game_messages:request_leave()
	client_manager:send_message(CLIENT_MANAGER, json.encode(game_message))
	
	self.screen_collection_id = collection_id
	core_state:change_game_state(core_state.LEAVING)

	leaving_screen:set_state(self.screen_collection_id, "Leaving")
end

local function ops_screen_created(self, collection_id)
	print(socket.gettime() .. " [CORE_MANAGER] Ops screen was created at " .. os.date())
end

local function apply_events(self, events)
	match_screen:apply_events(self.screen_collection_id, events)
end

local function set_spawn_countdown(self, time_to_spawn)
	match_screen:set_spawn_countdown(self.screen_collection_id, time_to_spawn)
end

function on_message(self, message_id, message, sender)
	if message_id == hash(core_manager.GAME_STARTED) then
		game_started(self)
		
	elseif message_id == hash(core_manager.GAME_FAILED) then
		local reason = message.reason
		game_failed(self, reason)
		
	elseif message_id == hash(core_manager.SCREEN_CREATED) then
		local screen_qualifier = message.screen_qualifier
		local collection_id = message.collection_id
		
		if screen_qualifier == core_manager.AUTH_SCREEN then
			auth_screen_created(self, collection_id)
		elseif screen_qualifier == core_manager.LOBBY_SCREEN then
			lobby_screen_created(self, collection_id)
		elseif screen_qualifier == core_manager.JOINING_SCREEN then
			joining_screen_created(self, collection_id)
		elseif screen_qualifier == core_manager.MATCH_SCREEN then
			match_screen_created(self, collection_id)
		elseif screen_qualifier == core_manager.LEAVING_SCREEN then
			leaving_screen_created(self, collection_id)
		elseif screen_qualifier == core_manager.OPS_SCREEN then
			ops_screen_created(self, collection_id)
		else
			error("[CORE_MANAGER] Unknown screen qualifier was received, screen_qualifier=" .. tostring(screen_qualifier))
		end

	elseif message_id == hash(core_manager.SIGNED_UP) then
		local user_id = message.user_id
		local password = message.password
		signed_up(self, user_id, password)
		
	elseif message_id == hash(core_manager.SIGNED_IN) then
		local client_id = message.client_id
		signed_in(self, client_id)
		
	elseif message_id == hash(core_manager.USER_GREETED) then
		local version_id = message.version_created
		local version_created = message.version_created
		greeted(self, version_id, version_created)
		
	elseif message_id == hash(core_manager.RUNTIME_ASSIGNED) then
		local runtime_qualifier = message.runtime_qualifier
		local runtime_id = message.runtime_id
		if runtime_qualifier == omgplayer.constants.LOBBY then
			lobby_assigned(self, runtime_qualifier, runtime_id)
		elseif runtime_qualifier == omgplayer.constants.MATCH then
			match_assigned(self, runtime_qualifier, runtime_id)
		else
			error("[CORE_MANAGER] Unknown runtime qualifier was received, runtime_qualifier=" .. tostring(runtime_qualifier))
		end
		
	elseif message_id == hash(core_manager.MESSAGE_RECEIVED) then
		local message_qualifier = message.qualifier
		if message_qualifier == server_messages.SET_PROFILE then
			local profile = message.profile
			set_profile(self, profile)

		elseif message_qualifier == server_messages.SET_STATE then
			local step = message.step
			local settings = message.settings
			local dangling_players = message.dangling_players
			local spawned_players = message.spawned_players
			set_state(self, step, settings, dangling_players, spawned_players)

		elseif message_qualifier == server_messages.APPLY_EVENTS then
			local events = message.events
			apply_events(self, events)

		elseif message_qualifier == server_messages.SET_SPAWN_COUNTDOWN then
			local time_to_spawn = message.time_to_spawn
			set_spawn_countdown(self, time_to_spawn)
			
		else
			error("[CORE_MANAGER] Unknown message qualifier was received, message_qualifier=" .. tostring(message_qualifier))
		end
		
	elseif message_id == hash(core_manager.CONNECTION_UPGRADED) then
		connection_upgraded(self)

	elseif message_id == hash(core_manager.JOINING_REQUESTED) then
		local nickname = message.nickname
		joining_requested(self, nickname)
		
	elseif message_id == hash(core_manager.LEAVING_REQUESTED) then
		leaving_requested(self)

	elseif message_id == hash(core_manager.RESET_REQUESTED) then
		reset_requested(self)
		
	end
end