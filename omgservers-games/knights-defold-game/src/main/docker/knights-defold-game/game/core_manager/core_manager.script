local screens_messages = require("game.screens_manager.screens_messages")
local client_messages = require("game.client_manager.client_messages")
local match_messages = require("game.match_screen.match_messages")
local lobby_messages = require("game.lobby_screen.lobby_messages")
local core_messages = require("game.core_manager.core_messages")
local auth_messages = require("game.auth_screen.auth_messages")
local core_state = require("game.core_manager.core_state")
local server_messages = require("common.server_messages")
local game_messages = require("common.game_messages")
local omgplayer = require("omgservers.omgplayer")

local SCREENS_MANAGER = "screens_manager#screens_manager"
local CLIENT_MANAGER = "client_manager#client_manager"

local function game_started(self)
	print(socket.gettime() .. " [CORE_MANAGER] Game started at " .. os.date())
	core_state:change_game_state(core_state.constants.IN_AUTH)

	-- Show auth screen
	local screens_message = screens_messages:create_auth_screen_requested_message()
	msg.post(SCREENS_MANAGER, screens_messages.constants.AUTH_SCREEN_REQUESTED, screens_message)
end

local function auth_screen_created(self, collection_id)
	print(socket.gettime() .. " [CORE_MANAGER] Auth screen was created at " .. os.date())
	
	self.screen_collection_id = collection_id

	local auth_message = auth_messages:create_set_state_requested_message("Signing up")
	msg.post(self.screen_collection_id, auth_messages.constants.SET_STATE_REQUESTED, auth_message)

	-- Sign up
	local client_message = client_messages:create_signing_up_requested_message()
	msg.post(CLIENT_MANAGER, client_messages.constants.SIGNING_UP_REQUESTED, client_message)
end

local function signed_up(self, user_id, password)
	print(socket.gettime() .. " [CORE_MANAGER] User signed up at " .. os.date())

	local auth_message = auth_messages:create_set_state_requested_message("Signing in")
	msg.post(self.screen_collection_id, auth_messages.constants.SET_STATE_REQUESTED, auth_message)

	-- Sign in
	local client_message = client_messages:create_signing_in_requested_message(user_id, password)
	msg.post(CLIENT_MANAGER, client_messages.constants.SIGNING_IN_REQUESTED, client_message)
end

local function signed_in(self, client_id)
	print(socket.gettime() .. " [CORE_MANAGER] User signed in at " .. os.date())
	core_state:set_client_id(client_id)
end

local function lobby_assigned(self, runtime_qualifier, runtime_id)
	-- This event is not triggered
end

local function greeted(self, version_id, version_created)
	print(socket.gettime() .. " [CORE_MANAGER] User greeted at " .. os.date() .. ", version_id=" .. version_id .. ", version_created=" .. version_created)

	local auth_message = auth_messages:create_set_state_requested_message("Getting profile")
	msg.post(self.screen_collection_id, auth_messages.constants.SET_STATE_REQUESTED, auth_message)

	-- Request profile
	local game_message = game_messages:create_request_profile_message()
	local client_message = client_messages:create_sending_requested_message(json.encode(game_message))
	msg.post(CLIENT_MANAGER, client_messages.constants.SENDING_REQUESTED, client_message)

	core_state:change_game_state(core_state.constants.GETTING_PROFILE)
end

local function set_profile(self, profile)
	print(socket.gettime() .. " [CORE_MANAGER] Profile was received at " .. os.date())
	core_state:set_profile(profile)

	if core_state.state.game_state == core_state.constants.GETTING_PROFILE then
		-- Show lobby screen
		local screens_message = screens_messages:create_lobby_screen_requested_message()
		msg.post(SCREENS_MANAGER, screens_messages.constants.LOBBY_SCREEN_REQUESTED, screens_message)
	end
end

local function lobby_screen_created(self, collection_id)
	print(socket.gettime() .. " [CORE_MANAGER] Lobby screen was created at " .. os.date())
	
	self.screen_collection_id = collection_id
	core_state:change_game_state(core_state.constants.IN_LOBBY)

	local auth_message = lobby_messages:create_set_state_requested_message("Matchmaking")
	msg.post(self.screen_collection_id, lobby_messages.constants.SET_STATE_REQUESTED, auth_message)

	-- Request matchmaking
	local game_message = game_messages:create_request_matchmaking_message()
	local client_message = client_messages:create_sending_requested_message(json.encode(game_message))
	msg.post(CLIENT_MANAGER, client_messages.constants.SENDING_REQUESTED, client_message)
end

local function match_assigned(self, runtime_qualifier, runtime_id)
	print(socket.gettime() .. " [CORE_MANAGER] Match was assigned at " .. os.date())
end

local function connection_upgraded(self)
	print(socket.gettime() .. " [CORE_MANAGER] Connection was upgraded at " .. os.date())
	
	core_state:change_game_state(core_state.constants.GETTING_STATE)
	
	-- Request match state
	local game_message = game_messages:create_request_state_message()
	local client_message = client_messages:create_sending_requested_message(json.encode(game_message))
	msg.post(CLIENT_MANAGER, client_messages.constants.SENDING_REQUESTED, client_message)
end

local function set_state(self, settings, dangling_players, spawned_players)
	print(socket.gettime() .. " [CORE_MANAGER] State was received at " .. os.date())
	
	if core_state.state.game_state == core_state.constants.GETTING_STATE then
		-- Show match screen
		local screens_message = screens_messages:create_match_screen_requested_message(settings, dangling_players, spawned_players)
		msg.post(SCREENS_MANAGER, screens_messages.constants.MATCH_SCREEN_REQUESTED, screens_message)
	end
end

local function match_screen_created(self, collection_id)
	print(socket.gettime() .. " [CORE_MANAGER] Match screen was created at " .. os.date())
	
	self.screen_collection_id = collection_id
	core_state:change_game_state(core_state.constants.IN_MATCH)
end

local function apply_events(self, events)
	local match_message = match_messages:create_apply_events_message(events)
	msg.post(self.screen_collection_id, match_messages.constants.APPLY_EVENTS, match_message)
end

local function request_move(self)
	local match_message = match_messages:create_request_move_message()
	msg.post(self.screen_collection_id, match_messages.constants.REQUEST_MOVE, match_message)
end

local function client_failed(self, reason)
	print(socket.gettime() .. " [CORE_MANAGER] Client failed at " .. os.date() .. ", reason=" ..reason)
	core_state:change_game_state(core_state.constants.GAME_FAILED)
end

function on_message(self, message_id, message, sender)
	if message_id == hash(core_messages.constants.GAME_STARTED) then
		game_started(self)
		
	elseif message_id == hash(core_messages.constants.SCREEN_CREATED) then
		local screen_qualifier = message.screen_qualifier
		local collection_id = message.collection_id
		
		if screen_qualifier == core_messages.constants.AUTH_SCREEN then
			auth_screen_created(self, collection_id)
		elseif screen_qualifier == core_messages.constants.LOBBY_SCREEN then
			lobby_screen_created(self, collection_id)
		elseif screen_qualifier == core_messages.constants.MATCH_SCREEN then
			match_screen_created(self, collection_id)
		else
			error("[CORE_MANAGER] Unknown screen qualifier was received, screen_qualifier=" .. tostring(screen_qualifier))
		end

	elseif message_id == hash(core_messages.constants.SIGNED_UP) then
		local user_id = message.user_id
		local password = message.password
		signed_up(self, user_id, password)
		
	elseif message_id == hash(core_messages.constants.SIGNED_IN) then
		local client_id = message.client_id
		signed_in(self, client_id)
		
	elseif message_id == hash(core_messages.constants.USER_GREETED) then
		local version_id = message.version_id
		local version_created = message.version_created
		greeted(self, version_id, version_created)
		
	elseif message_id == hash(core_messages.constants.RUNTIME_ASSIGNED) then
		local runtime_qualifier = message.runtime_qualifier
		local runtime_id = message.runtime_id
		if runtime_qualifier == omgplayer.constants.LOBBY then
			lobby_assigned(self, runtime_qualifier, runtime_id)
		elseif runtime_qualifier == omgplayer.constants.MATCH then
			match_assigned(self, runtime_qualifier, runtime_id)
		else
			error("[CORE_MANAGER] Unknown runtime qualifier was received, runtime_qualifier=" .. tostring(runtime_qualifier))
		end
		
	elseif message_id == hash(core_messages.constants.MESSAGE_RECEIVED) then
		local message_qualifier = message.qualifier
		if message_qualifier == server_messages.constants.SET_PROFILE then
			local profile = message.profile
			set_profile(self, profile)

		elseif message_qualifier == server_messages.constants.SET_STATE then
			local settings = message.settings
			local dangling_players = message.dangling_players
			local spawned_players = message.spawned_players
			set_state(self, settings, dangling_players, spawned_players)

		elseif message_qualifier == server_messages.constants.APPLY_EVENTS then
			local events = message.events
			apply_events(self, events)

		elseif message_qualifier == server_messages.constants.REQUEST_MOVE then
			request_move(self)
			
		else
			error("[CORE_MANAGER] Unknown message qualifier was received, message_qualifier=" .. tostring(message_qualifier))
		end
		
	elseif message_id == hash(core_messages.constants.CONNECTION_UPGRADED) then
		connection_upgraded(self)
		
	elseif message_id == hash(core_messages.constants.CLIENT_FAILED) then
		local reason = message.reason
		client_failed(self, reason)
		
	end
end