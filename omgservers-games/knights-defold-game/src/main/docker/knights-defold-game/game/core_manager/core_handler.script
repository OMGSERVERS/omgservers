local screens_messages = require("game.screens_manager.screens_messages")
local server_messages = require("common.server_messages.server_messages")
local client_messages = require("game.client_manager.client_messages")
local game_messages = require("common.game_messages.game_messages")
local core_messages = require("game.core_manager.core_messages")
local auth_messages = require("game.auth_screen.auth_messages")

local SCREENS_MANAGER = "screens_manager#screens_handler"
local CLIENT_MANAGER = "client_manager#client_handler"

local function handle_game_started_message(self, message)
	print("[CORE_HANDLER] Game started at " .. os.date())

	local screens_message = screens_messages:create_auth_screen_requested_message()
	msg.post(SCREENS_MANAGER, screens_messages.constants.AUTH_SCREEN_REQUESTED, screens_message)
end

local function handle_screen_created_message(self, message)
	self.screen_qualifier = message.screen_qualifier
	self.screen_collection_id = message.collection_id

	local screen_qualifier = message.screen_qualifier
		
	if screen_qualifier == core_messages.constants.AUTH_SCREEN then
		print("[CORE_HANDLER] Auth screen was created at " .. os.date())

		local auth_message = auth_messages:create_set_state_requested_message("Signing up")
		msg.post(self.screen_collection_id, auth_messages.constants.SET_STATE_REQUESTED, auth_message)

		local client_message = client_messages:create_signing_up_requested_message()
		msg.post(CLIENT_MANAGER, client_messages.constants.SIGNING_UP_REQUESTED, client_message)
		
	elseif screen_qualifier == core_messages.constants.LOBBY_SCREEN then
	elseif screen_qualifier == core_messages.constants.ARENA_SCREEN then
	else
		error("[CORE_HANDLER] Unknown screen qualifier was received")
	end
end

local function handle_signed_up_message(self, message)
	print("[CORE_HANDLER] User signed up at " .. os.date())

	local user_id = message.user_id
	local password = message.password

	local auth_message = auth_messages:create_set_state_requested_message("Signing in")
	msg.post(self.screen_collection_id, auth_messages.constants.SET_STATE_REQUESTED, auth_message)
	
	local client_message = client_messages:create_signing_in_requested_message(user_id, password)
	msg.post(CLIENT_MANAGER, client_messages.constants.SIGNING_IN_REQUESTED, client_message)
end

local function handle_signed_in_message(self, message)
	print("[CORE_HANDLER] User signed in at " .. os.date())
	
	local client_id = message.client_id
	self.client_id = client_id
end

local function handle_user_greeted_message(self, message)
	print("[CORE_HANDLER] User greeted at " .. os.date())
	
	local auth_message = auth_messages:create_set_state_requested_message("Getting profile")
	msg.post(self.screen_collection_id, auth_messages.constants.SET_STATE_REQUESTED, auth_message)

	-- Request profile
	local game_message = game_messages:create_request_profile_message()
	local client_message = client_messages:create_sending_requested_message(game_message)
	msg.post(CLIENT_MANAGER, client_messages.constants.SENDING_REQUESTED, client_message)
end

local function handle_runtime_assigned_message(self, message)
end

local function handle_message_received_message(self, message)
	local message_qualifier = message.qualifier

	if message_qualifier == server_messages.constants.SET_PROFILE then
	elseif message_qualifier == server_messages.constants.SET_STATE then
	elseif message_qualifier == server_messages.constants.APPLY_EVENTS then
	else
		error("[CORE_HANDLER] Unknown message qualifier was received")
	end
end

local function handle_client_failed_message(self, message)
end

function on_message(self, message_id, message, sender)
	if message_id == hash(core_messages.constants.GAME_STARTED) then
		handle_game_started_message(self, message)
	elseif message_id == hash(core_messages.constants.SCREEN_CREATED) then
		handle_screen_created_message(self, message)
	elseif message_id == hash(core_messages.constants.SIGNED_UP) then
		handle_signed_up_message(self, message)
	elseif message_id == hash(core_messages.constants.SIGNED_IN) then
		handle_signed_in_message(self, message)
	elseif message_id == hash(core_messages.constants.USER_GREETED) then
		handle_user_greeted_message(self, message)
	elseif message_id == hash(core_messages.constants.RUNTIME_ASSIGNED) then
		handle_runtime_assigned_message(self, message)
	elseif message_id == hash(core_messages.constants.MESSAGE_RECEIVED) then
		handle_message_received_message(self, message)
	elseif message_id == hash(core_messages.constants.CLIENT_FAILED) then
		handle_client_failed_message(self, message)
	else
		error("[CORE_HANDLER] Unknown message id was received")
	end
end