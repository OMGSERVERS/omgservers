local client_manager = require("game.client_manager.client_manager")
local match_pointer = require("game.match_pointer.match_pointer")
local match_messages = require("game.match_screen.match_screen")
local match_player = require("game.match_player.match_player")
local core_manager = require("game.core_manager.core_manager")
local match_gui = require("game.match_gui.match_gui")
local game_messages = require("common.game_messages")
local match_events = require("common.match_events")
local camera = require("orthographic.camera")

local CLIENT_MANAGER = "/client_manager#client_manager"
local PLAYER_SPAWNER = "match_spawner#player_factory"
local CAMERA_SCRIPT = "camera#script"
local MATCH_POINTER = "match_pointer/container"
local MATCH_GUI = "match_gui"

local function create_client(self, client_id, nickname)
	self.clients[client_id] = {
		nickname = nickname
	}

	print(socket.gettime() .. " [MATCH_SCREEN] Client was created, client_id=" .. client_id .. ", nickname=" .. nickname)

	if client_id == core_manager.get_client_id() then
		-- Send initial spawn request
		local game_message = game_messages:request_spawn()
		client_manager:send_message(CLIENT_MANAGER, json.encode(game_message))
	end
end

local function spawn_player(self, client_id, x, y)
	local client = self.clients[client_id]
	if client then
		local z = -y
		local position = vmath.vector3(x, y, z)
		local collection_ids = collectionfactory.create(PLAYER_SPAWNER, position)
		pprint(collection_ids)

		print(socket.gettime() .. " [MATCH_SCREEN] Player was spawned, client_id=" .. client_id .. ", x=" .. x .. ", y=" .. y .. ", z=" .. z)

		local player_id = collection_ids[hash("/match_player")]
		self.players[client_id] = player_id

		local controllable = client_id == core_manager.get_client_id()
		local nickname = client.nickname
		match_player:set_state(player_id, controllable, nickname)

		if controllable then
			print(socket.gettime() .. " [MATCH_SCREEN] Set camera, target=" .. player_id)
			camera.follow(nil, player_id, {
				lerp = 1,
			})

			match_pointer:enable_pointer(MATCH_POINTER, x, y)
		end
	else
		print(socket.gettime() .. " [MATCH_SCREEN] Client was not found to spawn player, client_id=" .. client_id)
	end
end

local function kill_player(self, client_id)
	local player_id = self.players[client_id]
	if player_id then
		
		-- If it's controllable player -> disable pointer before killing
		if client_id == core_manager.get_client_id() then
			match_pointer:disable_pointer(MATCH_POINTER)
		end
		
		match_player:go_death(player_id)
		
		self.players[client_id] = nil

		print(socket.gettime() .. " [MATCH_SCREEN] Player was killed, client_id=" .. client_id)
	else
		print(socket.gettime() .. " [MATCH_SCREEN] Player was not found to kill, client_id=" .. client_id)
	end
end

local function delete_player(self, client_id)
	self.clients[client_id] = nil
	print(socket.gettime() .. " [MATCH_SCREEN] Client was deleted, client_id=" .. client_id)

	local player_id = self.players[client_id]
	if player_id then
		-- kill if player stil exists
		kill_player(self, client_id)
		
	end
end

local function move_player(self, client_id, x, y)
	local player_id = self.players[client_id]
	if player_id then
		match_player:move_to(player_id, x, y)

		-- If it's controllable player -> reset pointer position to the default
		if client_id == core_manager.get_client_id() then
			match_pointer:enable_pointer(MATCH_POINTER, x, y)
		end
	else
		print(socket.gettime() .. " [MATCH_SCREEN] Player was not found to move, client_id=" .. client_id)
	end
end

local function set_state(self, settings, dangling_players, spawned_players)
	print(socket.gettime() .. " [MATCH_SCREEN] Set match state, settings=" .. json.encode(settings) .. ", dangling_players=" .. json.encode(dangling_players) .. ", spawned_players=" .. json.encode(spawned_players))

	self.settings = settings
	
	for client_id, player in pairs(dangling_players) do
		local nickname = player.nickname
		create_client(self, client_id, nickname)
	end
	
	for client_id, player in pairs(spawned_players) do
		local nickname = player.nickname
		local x = player.x
		local y = player.y
		create_client(self, client_id, nickname)
		spawn_player(self, client_id, x, y)
	end
end

local function apply_events(self, events)
	print(socket.gettime() .. " [MATCH_SCREEN] Apply events")
	pprint(events)
	
	-- Reset counter
	local counter_value = self.settings.waiting_duration
	match_gui:reset_counter(MATCH_GUI, counter_value)

	for _, event in ipairs(events) do
		local event_qualifier = event.qualifier

		if event_qualifier == match_events.PLAYER_CREATED then
			local client_id = event.client_id
			local nickname = event.nickname
			create_client(self, client_id, nickname)

		elseif event_qualifier == match_events.PLAYER_SPAWNED then
			local client_id = event.client_id
			local x = event.x
			local y = event.y
			spawn_player(self, client_id, x, y)

		elseif event_qualifier == match_events.PLAYER_DELETED then
			local client_id = event.client_id
			delete_player(self, client_id)

		elseif event_qualifier == match_events.PLAYER_MOVED then
			local client_id = event.client_id
			local x = event.x
			local y = event.y
			move_player(self, client_id, x, y)

		elseif event_qualifier == match_events.PLAYER_KILLED then
			local killed_client_id = event.killed_client_id
			local by_client_id = event.by_client_id

			timer.delay(0.5, false, function()
				if killed_client_id == core_manager.get_client_id() then
					camera.unfollow(nil)
					
					-- Send spawn request
					local game_message = game_messages:request_spawn()
					client_manager:send_message(CLIENT_MANAGER, json.encode(game_message))
				end

				kill_player(self, killed_client_id)
			end)
		end
	end
end

local function request_move(self)
	-- Hide counter
	match_gui:hide_counter(MATCH_GUI)
	
	if self.point then
		print(socket.gettime() .. " [MATCH_SCREEN] Move plyaer, x=" .. self.point.x .. ", y=" .. self.point.y)
		
		-- Move player
		local game_message = game_messages:move_player(self.point.x, self.point.y)
		client_manager:send_message(CLIENT_MANAGER, json.encode(game_message))

		self.point = nil
	end
end

local function pointed(self, x, y)
	local client_id = core_manager.get_client_id()
	local player_id = self.players[client_id]
	if player_id then
		local bounded_x = math.max(32, math.min(512 - 32, x))
		local bounded_y = math.max(32, math.min(512 - 32, y))
		
		match_pointer:enable_pointer(MATCH_POINTER, bounded_x, bounded_y)

		self.point = {
			x = bounded_x,
			y = bounded_y,
		}
		print(socket.gettime() .. " [MATCH_SCREEN] Point was set, x=" .. bounded_x .. ", y=" .. bounded_y)
	else
		print(socket.gettime() .. " [MATCH_SCREEN] Player was not found to point, client_id=" .. client_id)
	end
end

function init(self)
	self.players = {}
	self.clients = {}

	go.set(CAMERA_SCRIPT, "near_z", -1024)
	go.set(CAMERA_SCRIPT, "far_z", 1024)
	go.set(CAMERA_SCRIPT, "projection", camera.PROJECTOR.FIXED_ZOOM)
	go.set(CAMERA_SCRIPT, "zoom", 3)

	go.set(CAMERA_SCRIPT, "bounds_left", 0)
	go.set(CAMERA_SCRIPT, "bounds_right", 512)
	go.set(CAMERA_SCRIPT, "bounds_top", 512)
	go.set(CAMERA_SCRIPT, "bounds_bottom", 0)

	msg.post(".", "acquire_input_focus")
	
	print(socket.gettime() .. " [MATCH_SCREEN] Initialized")
end

function on_message(self, message_id, message, sender)
	if message_id == hash(match_messages.SET_STATE) then
		local settings = message.settings
		local dangling_players = message.dangling_players
		local spawned_players = message.spawned_players
		set_state(self, settings, dangling_players, spawned_players)

	elseif message_id == hash(match_messages.APPLY_EVENTS) then
		local events = message.events
		apply_events(self, events)

	elseif message_id == hash(match_messages.REQUEST_MOVE) then 
		request_move(self)
		
	end
end

function on_input(self, action_id, action)
	if action_id == hash("point") then
		if action.pressed then
			--
		elseif action.released then
			local world_position = camera.screen_to_world(nil, vmath.vector3(action.x, action.y, 0))
			local x = world_position.x
			local y = world_position.y
			pointed(self, x, y)
		end
	end
end