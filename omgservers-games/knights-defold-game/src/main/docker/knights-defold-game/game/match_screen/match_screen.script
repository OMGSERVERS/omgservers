local client_manager = require("game.client_manager.client_manager")
local match_pointer = require("game.match_pointer.match_pointer")
local match_messages = require("game.match_screen.match_screen")
local match_player = require("game.match_player.match_player")
local core_manager = require("game.core_manager.core_manager")
local match_gui = require("game.match_gui.match_gui")
local match_log = require("game.match_log.match_log")
local match_top = require("game.match_top.match_top")
local game_messages = require("common.game_messages")
local match_events = require("common.match_events")

local CLIENT_MANAGER = "/client_manager#client_manager"
local PLAYER_SPAWNER = "match_spawner#player_factory"
local MATCH_POINTER = "match_pointer/container"
local MATCH_CAMERA = "match_camera"
local MATCH_GUI = "match_gui"
local MATCH_LOG = "match_log"
local MATCH_TOP = "match_top"

local function create_client(self, client_id, nickname, score)
	self.clients[client_id] = {
		nickname = nickname,
		score = score,
	}

	print(socket.gettime() .. " [MATCH_SCREEN] Client was created, client_id=" .. client_id .. ", nickname=" .. nickname)

	match_top:add_player(MATCH_TOP, client_id, nickname, score)
	
	if client_id == core_manager:get_client_id() then
		-- Send initial spawn request
		local game_message = game_messages:request_spawn()
		client_manager:send_message(CLIENT_MANAGER, json.encode(game_message))
	end
end

local function spawn_player(self, client_id, x, y)
	local client = self.clients[client_id]
	if client then
		local z = -y
		local position = vmath.vector3(x, y, z)
		local collection_ids = collectionfactory.create(PLAYER_SPAWNER, position)
		pprint(collection_ids)

		print(socket.gettime() .. " [MATCH_SCREEN] Player was spawned, client_id=" .. client_id .. ", x=" .. x .. ", y=" .. y .. ", z=" .. z)

		local player_id = collection_ids[hash("/match_player")]
		self.players[client_id] = player_id

		local controllable = client_id == core_manager:get_client_id()
		local nickname = client.nickname
		match_player:set_state(player_id, controllable, nickname)

		if controllable then
			print(socket.gettime() .. " [MATCH_SCREEN] Set camera, target=" .. player_id)

			match_gui:disable_spawn_countdown(MATCH_GUI)
		end
	else
		print(socket.gettime() .. " [MATCH_SCREEN] Client was not found to spawn player, client_id=" .. client_id)
	end
end

local function kill_player(self, client_id)
	local player_id = self.players[client_id]
	if player_id then
		
		-- If it's controllable player -> disable pointer before killing
		if client_id == core_manager:get_client_id() then
			match_pointer:disable_pointer(MATCH_POINTER)
		end
		
		match_player:go_death(player_id)
		
		self.players[client_id] = nil

		print(socket.gettime() .. " [MATCH_SCREEN] Player was killed, client_id=" .. client_id)
	else
		print(socket.gettime() .. " [MATCH_SCREEN] Player was not found to kill, client_id=" .. client_id)
	end
end

local function delete_player(self, client_id)
	self.clients[client_id] = nil
	print(socket.gettime() .. " [MATCH_SCREEN] Client was deleted, client_id=" .. client_id)

	local player_id = self.players[client_id]
	if player_id then
		-- kill if player stil exists
		kill_player(self, client_id)

		match_top:delete_player(MATCH_TOP, client_id)
	end
end

local function move_player(self, client_id, x, y)
	local player_id = self.players[client_id]
	if player_id then
		match_player:move_to(player_id, x, y)

		if client_id == core_manager:get_client_id() then
			match_pointer:disable_pointer(MATCH_POINTER)
		end
	else
		print(socket.gettime() .. " [MATCH_SCREEN] Player was not found to move, client_id=" .. client_id)
	end
end

local function set_state(self, settings, dangling_players, spawned_players)
	print(socket.gettime() .. " [MATCH_SCREEN] Set match state, settings=" .. json.encode(settings) .. ", dangling_players=" .. json.encode(dangling_players) .. ", spawned_players=" .. json.encode(spawned_players))

	self.settings = settings
	
	for client_id, player in pairs(dangling_players) do
		local nickname = player.nickname
		local score = player.score
		create_client(self, client_id, nickname, score)
	end
	
	for client_id, player in pairs(spawned_players) do
		local nickname = player.nickname
		local score = player.score
		local x = player.x
		local y = player.y
		create_client(self, client_id, nickname, score)
		spawn_player(self, client_id, x, y)
	end
end

local function apply_events(self, events)
	print(socket.gettime() .. " [MATCH_SCREEN] Apply events")
	pprint(events)

	for _, event in ipairs(events) do
		local event_qualifier = event.qualifier

		if event_qualifier == match_events.PLAYER_CREATED then
			local client_id = event.client_id
			local nickname = event.nickname
			match_log:player_joined(MATCH_LOG, nickname)
			create_client(self, client_id, nickname, 0)
			
		elseif event_qualifier == match_events.PLAYER_SPAWNED then
			local client_id = event.client_id
			local x = event.x
			local y = event.y
			match_log:player_spawned(MATCH_LOG, self.clients[client_id].nickname)
			spawn_player(self, client_id, x, y)

		elseif event_qualifier == match_events.PLAYER_DELETED then
			local client_id = event.client_id
			match_log:player_leaved(MATCH_LOG, self.clients[client_id].nickname)
			delete_player(self, client_id)
			
		elseif event_qualifier == match_events.PLAYER_MOVED then
			local client_id = event.client_id
			local x = event.x
			local y = event.y
			move_player(self, client_id, x, y)

		elseif event_qualifier == match_events.PLAYER_KILLED then
			local killed_client_id = event.killed_client_id
			local by_client_id = event.by_client_id

			timer.delay(0.5, false, function()
				if killed_client_id == core_manager:get_client_id() then
					-- camera.unfollow(nil)
					
					-- Send spawn request
					local game_message = game_messages:request_spawn()
					client_manager:send_message(CLIENT_MANAGER, json.encode(game_message))
				end

				kill_player(self, killed_client_id)

				match_log:player_killed(MATCH_LOG, self.clients[killed_client_id].nickname, self.clients[by_client_id].nickname)
				match_top:increase_score(MATCH_TOP, by_client_id)
			end)
		end
	end
end

local function set_spawn_countdown(self, time_to_spawn)
	print(socket.gettime() .. " [MATCH_SCREEN] Set spawn countdown, time_to_spawn=" .. time_to_spawn)
	
	match_gui:enable_spawn_countdown(MATCH_GUI, math.max(0, time_to_spawn))
end

local function screen_to_world(x, y, z)
	local camera = "match_camera#camera"
	local projection = go.get(camera, "projection")
	local view = go.get(camera, "view")
	local w, h = window.get_size()
	-- The window.get_size() function will return the scaled window size,
	-- ie taking into account display scaling (Retina screens on macOS for
	-- instance). We need to adjust for display scaling in our calculation.
	w = w / (w / 640)
	h = h / (h / 480)

	-- https://defold.com/manuals/camera/#converting-mouse-to-world-coordinates
	local inv = vmath.inv(projection * view)
	x = (2 * x / w) - 1
	y = (2 * y / h) - 1
	z = (2 * z) - 1
	local x1 = x * inv.m00 + y * inv.m01 + z * inv.m02 + inv.m03
	local y1 = x * inv.m10 + y * inv.m11 + z * inv.m12 + inv.m13
	local z1 = x * inv.m20 + y * inv.m21 + z * inv.m22 + inv.m23
	return x1, y1, z1
end

local function pointed(self, pointed_x, pointed_y)
	local x, y = screen_to_world(pointed_x, pointed_y, 0)
	
	local client_id = core_manager:get_client_id()
	local player_id = self.players[client_id]
	if player_id then
		local bounded_x = math.max(24, math.min(256 - 24, x))
		local bounded_y = math.max(24, math.min(256 - 24, y))
		
		match_pointer:enable_pointer(MATCH_POINTER, bounded_x, bounded_y)

		print(socket.gettime() .. " [MATCH_SCREEN] Move player, x=" .. bounded_x .. ", y=" .. bounded_y)

		-- Move player
		local game_message = game_messages:move_player(bounded_x, bounded_y)
		client_manager:send_message(CLIENT_MANAGER, json.encode(game_message))
	else
		print(socket.gettime() .. " [MATCH_SCREEN] Player was not found to point, client_id=" .. client_id)
	end
end

function init(self)
	self.players = {}
	self.clients = {}
	
	print(socket.gettime() .. " [MATCH_SCREEN] Initialized")
end

function final(self)
	for client_id, player_id in pairs(self.players) do
		go.delete(player_id)
		print(socket.gettime() .. " [MATCH_SCREEN] Player was deleted, id=" .. player_id)
	end

	print(socket.gettime() .. " [MATCH_SCREEN] Finalized")
end

function update(self, dt)
	local client_id = core_manager:get_client_id()
	local player_id = self.players[client_id]
	if player_id then
		local player_position = go.get_position(player_id)
		local camera_x = player_position.x
		local camera_y = player_position.y
		local camera_position = vmath.vector3(camera_x, camera_y, 0)
		
		go.set_position(camera_position, MATCH_CAMERA)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash(match_messages.SET_STATE) then
		local settings = message.settings
		local dangling_players = message.dangling_players
		local spawned_players = message.spawned_players
		set_state(self, settings, dangling_players, spawned_players)

	elseif message_id == hash(match_messages.APPLY_EVENTS) then
		local events = message.events
		apply_events(self, events)

	elseif message_id == hash(match_messages.SET_SPAWN_COUNTDOWN) then
		local time_to_spawn = message.time_to_spawn
		set_spawn_countdown(self, time_to_spawn)

	elseif message_id == hash(match_messages.POINTED) then
		local x = message.x
		local y = message.y
		pointed(self, x, y)
		
	end
end